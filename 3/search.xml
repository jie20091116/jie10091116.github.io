<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于后端返回的大数字问题</title>
      <link href="/2022/10/30/guan-yu-hou-duan-fan-hui-da-shu-zi-de-wen-ti/"/>
      <url>/2022/10/30/guan-yu-hou-duan-fan-hui-da-shu-zi-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="关于后端返回的大数字问题"><a href="#关于后端返回的大数字问题" class="headerlink" title="关于后端返回的大数字问题"></a><strong>关于后端返回的大数字问题</strong></h2><p>我们在请求文章详情的接口时会返回404，是因为我们请求发送的文章id不正确</p><p>javaScript可以准确地表示2^-53到2^53之间的整数（不包含端点），超过这个范围就无法精确的表示这个值，因此使得javaScript不适合进行科学和金融方面的精确计算</p><pre class=" language-js"><code class="language-js">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 9007199254740992</span><span class="token number">9007199254740992</span>  <span class="token comment" spellcheck="true">// 9007199254740992</span><span class="token number">9007199254740993</span>  <span class="token comment" spellcheck="true">// 9007199254740992</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p>ES6 引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限。</p><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token operator">===</span> <span class="token number">9007199254740991</span><span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER <span class="token operator">===</span> <span class="token operator">-</span>Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER<span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">9007199254740991</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>上面代码可以看出javaScript可以精确表示的整数的极限</p><p>后端返回的数据一般都是JSON格式的字符串</p><pre class=" language-js"><code class="language-js"><span class="token string">'&amp;#123; "id": 9007199254740995, "name": "Jack", "age": 18 &amp;#125;'</span></code></pre><p>如果这个字符不做任何处理，你能方便的获取到字符串中的指定数据吗？非常麻烦。所以我们要把它转换为 JavaScript 对象来使用就很方便了。</p><p>幸运的是 axios 为了方便我们使用数据，它会在内部使用 <code>JSON.parse()</code> 把后端返回的数据转为 JavaScript 对象。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// &amp;#123; id: 9007199254740996, name: 'Jack', age: 18 &amp;#125;</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&amp;#123; "id": 9007199254740995, "name": "Jack", "age": 18 &amp;#125;'</span><span class="token punctuation">)</span></code></pre><p>可以看到，超出安全整数范围的 id 无法精确表示，这个问题并不是 axios 的错。</p><p>了解了什么是大整数的概念，接下来的问题是如何解决？</p><p><a href="https://github.com/sidorares/json-bigint">json-bigint</a> 是一个第三方包，它可以帮我们很好的处理这个问题。</p><p>使用它的第一步就是把它安装到你的项目中。</p><pre class=" language-sh"><code class="language-sh">npm i json-bigint</code></pre><p>下面是使用它的一个简单示例。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jsonStr <span class="token operator">=</span> <span class="token string">'&amp;#123; "art_id": 1245953273786007552&amp;#125;'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1245953273786007600</span><span class="token comment" spellcheck="true">// JSON.stringify()</span><span class="token comment" spellcheck="true">// JSONBig 可以处数据中超过 JavaScript 安全整数范围的问题</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSONBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把 JSON 格式的字符串转为 JavaScript 对象</span><span class="token comment" spellcheck="true">// 使用的时候需要把 BigNumber 类型的数据转为字符串来使用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSONBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">.</span>art_id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1245953273786007552</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>JSONBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSONBig<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>JSONBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 把 JavaScript 对象 转为 JSON 格式的字符串转</span></code></pre><blockquote><p>json-bigint 会把超出 JS 安全整数范围的数字转为一个 BigNumber 类型的对象，对象数据是它内部的一个算法处理之后的，我们要做的就是在使用的时候转为字符串来使用。</p></blockquote><p>通过 Axios 请求得到的数据都是 Axios 处理（JSON.parse）之后的，我们应该在 Axios 执行处理之前手动使用 json-bigint 来解析处理。Axios 提供了自定义处理原始后端返回数据的 API：<code>transformResponse</code> 。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> jsonBig <span class="token keyword">from</span> <span class="token string">'json-bigint'</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'&amp;#123; "value" : 9223372036854775807, "v2": 123 &amp;#125;'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  baseURL<span class="token punctuation">:</span> <span class="token string">'http://ttapi.research.itcast.cn/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 接口基础路径</span>  <span class="token comment" spellcheck="true">// transformResponse 允许自定义原始的响应数据（字符串）</span>  transformResponse<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果转换成功则返回转换的数据结果</span>      <span class="token keyword">return</span> jsonBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果转换失败，则包装为统一数据格式并返回</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        data      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> request</code></pre><blockquote><p>扩展：ES2020 BigInt<br>ES2020 引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。<br>参考链接：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects&#x2F;BigInt</a></li><li><a href="http://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">http://es6.ruanyifeng.com/#docs/number#BigInt-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> 后端的大数字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索细节问题</title>
      <link href="/2022/10/28/guan-yu-sou-suo-shi-de-yi-xie-xi-jie/"/>
      <url>/2022/10/28/guan-yu-sou-suo-shi-de-yi-xie-xi-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖优化"><a href="#防抖优化" class="headerlink" title="防抖优化"></a>防抖优化</h2><p>防抖：防止用户在输入关键词是input的change事件不断触发，导致过多不必要的请求</p><p>解决方案：1、加定时器 2、使用插件</p><p>我们这里使用lodash插件</p><p>1、安装lodash</p><pre class=" language-sh"><code class="language-sh"># yarn add lodashnpm i lodash</code></pre><p>2、防抖处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// lodash 支持按需加载，有利于打包结果优化</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> debounce <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'lodash'</span></code></pre><blockquote><p>不建议下面这样实用，因为这样会加载整个模块</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">'lodash'</span>_<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// debounce函数</span><span class="token comment" spellcheck="true">// 参数1：函数</span><span class="token comment" spellcheck="true">// 参数2：防抖时间</span><span class="token comment" spellcheck="true">// 返回值：防抖之后的函数，和参数1功能是一样的</span>onSearchInput<span class="token punctuation">:</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> searchContent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>searchContent    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>searchContent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 请求获取数据</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSuggestions</span><span class="token punctuation">(</span>searchContent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 将数据添加到组件实例中</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>suggestions <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>options    <span class="token comment" spellcheck="true">// 3. 模板绑定</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span></code></pre><h2 id="搜索关键字高亮"><a href="#搜索关键字高亮" class="headerlink" title="搜索关键字高亮"></a>搜索关键字高亮</h2><p>如何将字符串中的指定字符在<strong>网页</strong>中高亮展示？<br>将需要高亮的字符包裹 HTML 标签，为其单独设置颜色。</p><pre class=" language-html"><code class="language-html">"Hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>"</code></pre><p>在 Vue 中如何渲染带有 HTML 标签的字符串？</p><pre class=" language-js"><code class="language-js">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    htmlStr<span class="token punctuation">:</span> <span class="token string">'Hello &lt;span style="color: red">World&lt;/span>'</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> htmlStr <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>htmlStr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/../img/image-20200112154732044.png" alt="显示结果"></p><p>如何把字符串中指定字符统一替换为高亮（包裹了 HTML）的字符？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token comment" spellcheck="true">// 结果：&lt;span style="color: red">Hello&lt;/span> World</span><span class="token string">"Hello World"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span><span class="token string">'&lt;span style="color: red">Hello&lt;/span>'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果想全文替换，使用正则表达式</span><span class="token comment" spellcheck="true">// g 全局</span><span class="token comment" spellcheck="true">// i 忽略大小写</span><span class="token comment" spellcheck="true">// &lt;span style="color: red">Hello&lt;/span> World &lt;span style="color: red">Hello&lt;/span> abc</span><span class="token string">"Hello World Hello abc"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/Hello/gi</span><span class="token punctuation">,</span> <span class="token string">'&lt;span style="color: red">Hello&lt;/span>'</span><span class="token punctuation">)</span></code></pre><blockquote><p>一个小扩展：使用字符串的 split 结合数组的 join 方法实现高亮</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"hello world 你好 hello"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["", " world 你好 ", ""]</span><span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "&lt;span>hello&lt;/span> world 你好 &lt;span>hello&lt;/span>"</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面是具体的处理。</p><p>1、在method中添加一个方法处理高亮</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 参数 source：原始字符串</span><span class="token comment" spellcheck="true">// 参数 keyword: 需要高亮的关键字</span><span class="token comment" spellcheck="true">// 返回值：替换之后的高亮字符串</span>highlight <span class="token punctuation">(</span>source<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// /searchContent/ 正则表达式中的一切内容都会当做字符串使用</span>  <span class="token comment" spellcheck="true">// 这里可以 new RegExp 方式根据字符串创建一个正则表达式</span>  <span class="token comment" spellcheck="true">// RegExp 是原生 JavaScript 的内置构造函数</span>  <span class="token comment" spellcheck="true">// 参数1：字符串，注意，这里不要加 //</span>  <span class="token comment" spellcheck="true">// 参数2：匹配模式，g 全局，i 忽略大小写</span>  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">'gi'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`&lt;span style="color: #3296fa">$&amp;#123;keyword&amp;#125;&lt;/span>`</span></span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>2、然后在联想建议列表项中绑定调用</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 联想建议 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"searchContent"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>van<span class="token operator">-</span>cell    icon<span class="token operator">=</span><span class="token string">"search"</span>    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in suggestions"</span>    <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"index"</span>    @click<span class="token operator">=</span><span class="token string">"onSearch(item)"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>div slot<span class="token operator">=</span><span class="token string">"title"</span> v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"highlight(item, searchContent)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>cell<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>cell<span class="token operator">-</span>group<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">/</span>联想建议 <span class="token operator">--</span><span class="token operator">></span></code></pre><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>1、利用 watch 监视统一存储数据</p><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  searchHistories <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 同步到本地存储</span>    <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'serach-histories'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>2、初始化的时候从本地存储获取数据</p><pre class=" language-js"><code class="language-js">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span>    searchHistories<span class="token punctuation">:</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'serach-histories'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理相对时间</title>
      <link href="/2022/10/28/chu-li-xiang-dui-shi-jian/"/>
      <url>/2022/10/28/chu-li-xiang-dui-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="处理相对时间"><a href="#处理相对时间" class="headerlink" title="处理相对时间"></a>处理相对时间</h2><p>推荐两个第三方库：</p><ul><li><a href="https://momentjs.com/">Moment.js</a></li><li><a href="https://day.js.org/">Day.js</a></li></ul><p>两者都是专门用于处理时间的 JavaScript 库，功能差不多，因为 Day.js 的设计就是参考的 Moment.js。但是 Day.js 相比 Moment.js 的包体积要更小一些，因为它采用了插件化的处理方式。</p><p><a href="https://day.js.org/zh-CN/">Day.js</a> 是一个轻量的处理时间和日期的 JavaScript 库，和 <a href="https://momentjs.com/">Moment.js</a> 的 API 设计保持完全一样，如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js 。</p><ul><li>Day.js可以运行在浏览器和Node.js中。</li><li>🕒和Moment.js相同的API和用法</li><li>💪 不可变数据(Immutable)</li><li>🔥支持链式操作(Chainable)</li><li>🌐国际化</li><li>📦 仅仅2kb大小的微库</li><li>👫全浏览器兼容</li></ul><p>1、安装</p><pre class=" language-sh"><code class="language-sh">npm i dayjs</code></pre><p>2、创建 <code>utils/dayjs.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> daujs <span class="token keyword">from</span> <span class="token string">'dayjs'</span><span class="token comment" spellcheck="true">// 加载中文语言包</span><span class="token keyword">import</span> <span class="token string">'dayjs/local/zh-cn'</span><span class="token keyword">import</span> relativeTime <span class="token keyword">from</span> <span class="token string">'dayjs/plugin/relativeTime'</span><span class="token comment" spellcheck="true">// 配置使用处理相对时间的插件</span>dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>relativeTime<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置使用中文语言包</span>dayjs<span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'zh-cn'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 全局注册过滤器</span>Vue<span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'relativeTime'</span><span class="token punctuation">,</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dayjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>3、在main.js中加载初始化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./utils/dayjs'</span></code></pre><p>4、使用过滤器</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> 日期数据 | relativeTime <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> day.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于第三方图片403的问题</title>
      <link href="/2022/10/28/guan-yu-di-san-fang-tu-pian-zi-yuan-403-de-wen-ti/"/>
      <url>/2022/10/28/guan-yu-di-san-fang-tu-pian-zi-yuan-403-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="关于第三方图片资源403问题"><a href="#关于第三方图片资源403问题" class="headerlink" title="关于第三方图片资源403问题"></a><strong>关于第三方图片资源403问题</strong></h2><p>为什么文章列表数据中的好多图片资源请求失败返回 403？</p><blockquote><p>这是因为我们项目的接口数据是后端通过爬虫抓取的第三方平台内容，而第三方平台对图片资源做了防盗链处理</p></blockquote><p>第三方平台怎么处理图片的资源保护的？</p><blockquote><p>服务端一般使用Referer 请求头识别访问来源，然后处理资源访问</p></blockquote><p><img src="/../img/image-20200405134347749.png" alt="图片请求"></p><p>Referer 是什么东西？</p><blockquote><p>扩展参考:<a href="http://www.ruanyifeng.com/blog/2019/06/http-referer.html">http://www.ruanyifeng.com/blog/2019/06/http-referer.html</a></p></blockquote><pre class=" language-markdown"><code class="language-markdown">Referer 是 HTTP 请求头的一部分，当浏览器向 Web 服务器发送请求的时候，一般会带上 Referer，它包含了当前请求资源的来源页面的地址。服务端一般使用 Referer 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。</code></pre><blockquote><p>需要注意的是referer实际上是’referrer’误拼写。参见<a href="https://zh.wikipedia.org/wiki/HTTP_referer">HTTP referer on Wikipedia</a> （HTTP referer 在维基百科上的条目）来获取更详细的信息。</p></blockquote><p>怎么解决？</p><pre class=" language-markdown"><code class="language-markdown">不要发送Referrer，对方服务端就不知道笔从哪里来了，姑且认为是自己人</code></pre><p>如何设置不发送referrer？</p><p>用 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;script&gt;</code> 或者 <code>&lt;link&gt;</code> 元素上的 <code>referrerpolicy</code> 属性为其设置独立的请求策略，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://……<span class="token punctuation">"</span></span> <span class="token attr-name">referrerPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>或者直接在 HTMl 页面头中通过 meta 属性全局配置：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> 第三方图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化设置Token</title>
      <link href="/2022/10/27/you-hua-she-zhi-token/"/>
      <url>/2022/10/27/you-hua-she-zhi-token/</url>
      
        <content type="html"><![CDATA[<h2 id="优化设置Token"><a href="#优化设置Token" class="headerlink" title="优化设置Token"></a><strong>优化设置Token</strong></h2><p>项目中的接口大部分需要我们提供token才有访问权限<br>通过接口文档我们可以看到，后端接口要求我们将token放到请求头header中并以下面的格式发送<br><img src="/../img/image-20200301214857543.png" alt="token发送格式"></p><blockquote><p>字段名称: Authorization<br>字段值: Bearer token</p></blockquote><p>方式一: 在每次请求的时候手动添加(麻烦)。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    method<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    header<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Authorization<span class="token punctuation">:</span> <span class="token string">'Bearer token'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>方式二：使用请求拦截器统一添加(推荐，更方便)</p><p><img src="/../img/header.png" alt="请求拦截器"></p><p>在 <code>src/utils/request.js</code> 中添加拦截器统一设置 token：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 请求模块 */</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'@/store'</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://toutiao.itheima.net'</span> <span class="token comment" spellcheck="true">// 接口的基准地址</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 请求拦截器</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// config: 本次请求的配置对象</span>    <span class="token comment" spellcheck="true">// config 里面有一个属性：header</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> user <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> store<span class="token punctuation">.</span>state    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bearer $&amp;#123;user.token&amp;#125;`</span></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//响应拦截器</span><span class="token keyword">export</span> <span class="token keyword">default</span> request</code></pre>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于.postcssrc.js配置文件</title>
      <link href="/2022/10/27/guan-yu.postcssrc.js-pei-zhi-wen-jian/"/>
      <url>/2022/10/27/guan-yu.postcssrc.js-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-postcssrc-js配置文件"><a href="#关于-postcssrc-js配置文件" class="headerlink" title="关于.postcssrc.js配置文件"></a><strong>关于<code>.postcssrc.js</code>配置文件</strong></h2><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    plugin<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">'autoprefixer'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            browsers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Android >= 4.0'</span><span class="token punctuation">,</span> <span class="token string">'iOS >= 8'</span><span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token string">'postcss-pxtorem'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            rootValue<span class="token punctuation">:</span> <span class="token number">37.5</span><span class="token punctuation">,</span>            propList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>.postcssrc.js</code>是 PostCSS 的配置文件。</p><p>（1）PostCSS 介绍</p><p><a href="https://postcss.org/">PostCSS</a> 是一个处理 CSS 的处理工具，本身功能比较单一，它主要负责解析 CSS 代码，再交由插件来进行处理，它的插件体系非常强大，所能进行的操作是多种多样的，例如：</p><ul><li><a href="https://github.com/postcss/autoprefixer">Autoprefixer</a> 插件可以实现自动添加浏览器相关的声明前缀</li><li><a href="https://github.com/csstools/postcss-preset-env">PostCSS Preset Env</a> 插件可以让你使用更新的CSS语法特性并实现向下兼容</li><li><a href="https://github.com/cuth/postcss-pxtorem">postcss-pxtorem</a> 可以实现将 px 转换为 rem</li><li>…</li></ul><p>目前 PostCSS 已经有 <a href="https://github.com/postcss/postcss/blob/master/docs/plugins.md">200 多个功能各异的插件</a>。开发人员也可以根据项目的需要，开发出自己的 PostCSS 插件。</p><p>PostCSS 一般不单独使用，而是与已有的构建工具进行集成。</p><p><a href="https://cli.vuejs.org/zh/guide/css.html#postcss">Vue CLI 默认集成了 PostCSS</a>，并且默认开启了 <a href="https://github.com/postcss/autoprefixer">autoprefixer</a> 插件。</p><blockquote><p>Vue CLI内部使用了PostCSS。<br>你可以通过<code>.postcssrc</code>或任何 <a href="https://github.com/michael-ciniawsky/postcss-load-config">postcss-load-config</a>支持的配置资源来配置PostCSS<br>也可以通过vue.config.js中的css.loaderOptions.postcss配置 <a href="https://github.com/postcss/postcss-loader">postcss-loader</a>。<br>我们默认开启了<a href="https://github.com/postcss/autoprefixer">autoprefixer</a>。如果要配置目标浏览器，可使用 <code>package.json</code> 的 <a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist">browserslist</a> 字段。</p></blockquote><p>（2）Autoprefixer 插件的配置</p><p><img src="/../img/image-20200319104557718.png" alt="Autoprefixer插件的配置"></p><p><a href="https://github.com/postcss/autoprefixer">autoprefixer</a>是一个自动添加浏览器前缀的 PostCss 插件，<code>browsers</code> 用来配置兼容的浏览器版本信息，但是写在这里的话会引起编译器警告。</p><pre class=" language-error"><code class="language-error">Replace Autoprefixer browsers option to Browserslist config.Use browserslist key in package.json or .browserslistrc file.Using browsers option can cause errors. Browserslist configcan be used for Babel, Autoprefixer, postcss-normalize and other tools.If you really need to use option, rename it to overrideBrowserslist.Learn more at:https://github.com/browserslist/browserslist#readmehttps://twitter.com/browserslist</code></pre><p>警告意思就是说你应该将 <code>browsers</code> 选项写到 <code>package.json</code> 或 <code>.browserlistrc</code> 文件中。</p><pre class=" language-default"><code class="language-default">[Android]>= 4.0[iOS]>= 8</code></pre><blockquote><p>具体语法请<a href="https://github.com/browserslist/browserslist">参考这里</a>。<br>（3）postcss-pxtorem 插件的配置</p></blockquote><p><img src="/../img/image-20200319105610557.png" alt="postcss-pxtorem插件的配置"></p><ul><li><code>rootValue</code>: 表示根元素字体大小，它会根据元素大小进行单位转换</li><li><code>propList</code>: 用来设定可以从px转为rem的属性<ul><li>例如<code>*</code>就是所有的属性都要转换，<code>width</code>就是仅仅转换<code>width</code>属性</li></ul></li></ul><p><code>rootValue</code> 应该如何设置呢？</p><pre class=" language-default"><code class="language-default">如果你使用的是基于 lib-flexable 的 REM 适配方案，则应该设置为你的设计稿的十分之一。例如设计稿是 750 宽，则应该设置为 75。</code></pre><p>大多数设计稿的原型都是以 iphone6 为原型，iphone6 设备的宽是 750，我们的设计稿也是这样。</p><p>但是 Vant 建议设置为 37.5，为什么呢？</p><blockquote><p>因为 Vant 是基于 375 写的，所以如果你设置为 75 的话，Vant 的样式就小了一半。</p></blockquote><p>所以如果设置为<code>37.5</code>的话，Vant 的样式是没有问题的，但是我们在测量设计稿的时候都必须除2才能使用，否则就会变得很大。</p><p>这样做其实也没有问题，但是有没有更好的办法呢？我就想实现测量多少写多少（不用换算）。于是聪明的你就想，可以不可以这样来做？</p><ul><li>如果是 Vant 的样式，就把 <code>rootValue</code> 设置为 37.5 来转换</li><li>如果是我们的样式，就按照 75 的 <code>rootValue</code> 来转换</li></ul><p>通过<a href="https://github.com/cuth/postcss-pxtorem#options">查阅文档</a>我们可以看到 <code>rootValue</code> 支持两种参数类型：</p><ul><li>数字：固定值</li><li>函数：动态计算返回<ul><li>postcss-pxtorem处理每个 CSS 文件的时候都会来调用这个函数</li><li>它会把被处理的 CSS 文件相关的信息通过参数传递给该函数</li></ul></li></ul><p>所以我们修改配置如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * PostCSS配置文件 */</span>module<span class="token punctuation">.</span>exports <span class="token operator">-</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 配置要是用的PostCSS插件</span>    plugins<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置使用 postcss-pxtorem 插件</span>        <span class="token comment" spellcheck="true">// 作用：把px 转为 rem</span>        <span class="token string">'postcss-pxtorem'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            rootValue <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> file <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'vant'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">37.5</span> <span class="token punctuation">:</span> <span class="token number">75</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            propList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>配置完毕，把服务重启一下，最后测试，very good。</p>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> postcssrc插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于用户token的处理</title>
      <link href="/2022/10/26/guan-yu-yong-hu-token-de-chu-li/"/>
      <url>/2022/10/26/guan-yu-yong-hu-token-de-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="处理用户-Token"><a href="#处理用户-Token" class="headerlink" title="处理用户 Token"></a><strong>处理用户 Token</strong></h2><p><code>Token</code>是用户登录成功后服务端返回的一个身份令牌，在项目中的多个业务中需要使用到:</p><ul><li>访问需要授权的API</li><li>校验页面的访问权限</li><li>…</li></ul><p>但是我们只有在第一次用户登录成功之后才能拿到<code>Token</code>。<br>所以为了能在其它模块中获取到<code>Token</code>数据，我们需要把它存储到一个公共的位置，方便随时取用。<br>往哪儿存？</p><ul><li>本地储存<ul><li>获取麻烦</li><li>数据不是响应式</li></ul></li><li>Vuex容器（推荐）<ul><li>获取方便</li><li>响应式的</li></ul></li></ul><p>使用容器存储<code>Token</code>的思路：</p><p><img src="/../img/image-20200109192157006.png" alt="容器存储Token"></p><ul><li>登录成功后，将<code>Token</code>存储到<code>Vuex</code>容器中<ul><li>获取方便</li><li>响应式</li></ul></li><li>为了持久化，还需要把<code>Token</code>存到本地储存<ul><li>持久化</li></ul></li></ul><p>下面是具体实现</p><p>1、在<code>src/store/index.js</code>中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户登录的状态信息</span>        user<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"TOUTIAO_USER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// user: null</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        setUser <span class="token punctuation">(</span>state<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            state<span class="token punctuation">.</span>user <span class="token operator">=</span> user            window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'TOUTIAO_USER'</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    action<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    modules<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>2、登录成功以后将后端返回的 token 相关数据存储到容器中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> onLogin <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        duration<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 持续时间，0表示持续展示不停止</span>        forbidClick<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否禁止背景点击</span>        message<span class="token punctuation">:</span> <span class="token string">'登录中...'</span> <span class="token comment" spellcheck="true">// 提示消息</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'setUser'</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'登陆成功'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'登录失败'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'登录失败，手机号或验证码错误'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 停止 loading，它会把当前页面中所有的 toast 都给清除</span>    <span class="token comment" spellcheck="true">// loginToast.clear()</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="优化封装本地存储操作模块"><a href="#优化封装本地存储操作模块" class="headerlink" title="优化封装本地存储操作模块"></a><strong>优化封装本地存储操作模块</strong></h2><p>创建<code>src/utils/storage.js</code>模块。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> getItem <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setItem <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> removeItem <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="关于-Token-过期问题"><a href="#关于-Token-过期问题" class="headerlink" title="关于 Token 过期问题"></a><strong>关于 Token 过期问题</strong></h2><p>登录成功之后后端会返回两个 Token：</p><ul><li><code>token</code>：访问令牌，有效期2小时</li><li><code>refresh_token</code>：刷新令牌，有效期14天，用于访问令牌过期之后重新获取新的访问令牌</li></ul><p>我们的项目接口中设定的 <code>Token</code> 有效期是 <code>2 小时</code>，超过有效期服务端会返回 <code>401</code> 表示 Token 无效或过期了。</p><p>为什么过期时间这么短？</p><ul><li>为了安全，例如 Token 被别人盗用</li></ul><p>过期了怎么办？</p><ul><li><del>让用户重新登录</del>，用户体验太差了</li><li>使用<code>refresh-token</code>解决<code>token</code>过期</li></ul><p>如何使用 <code>refresh_token</code> 解决 <code>token</code> 过期？</p><p>到课程的后面我们开发的业务功能丰富起来之后，再给大家讲解 Token 过期处理。</p><p>大家需要注意的是<strong>在学习测试的时候如果收到 401 响应码，请重新登录再测试</strong>。</p><p><img src="/../img/v2-8f29f24dd291ddf46abda5d5ab7bec6c_720w.jpg" alt="Token 过期处理"></p><p>概述：服务器生成<code>token</code>的过程中，会有两个时间，一个是<code>token</code>失效时间，一个是<code>token</code>刷新时间，刷新时间肯定比失效时间长，当用户的 <code>token</code> 过期时，你可以拿着过期的<code>token</code>去换取新的<code>token</code>，来保持用户的登陆状态，当然你这个过期<code>token</code>的过期时间必须在刷新时间之内，如果超出了刷新时间，那么返回的依旧是 401。</p><p>处理流程:</p><ol><li>在axios的拦截器中加入token刷新逻辑</li><li>当用户token过期时，去向服务器请求新的 token</li><li>把旧的token替换为新的token</li><li>然后继续用户当前的请求</li></ol><p>在请求的响应拦截器中统一处理 token 过期：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 封装 axios 请求模块 */</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> jsonBig <span class="token keyword">from</span> <span class="token string">"json-bigint"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"@/store"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"@/router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// axios.create 方法：复制一个 axios</span><span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"http://ttapi.research.itcast.cn/"</span> <span class="token comment" spellcheck="true">// 基础路径</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 配置处理后端返回数据中超出 js 安全整数范围问题 */</span>request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>transformResponse <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> jsonBig<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求拦截器</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bearer $&amp;#123;user.token&amp;#125;`</span></span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Do something before request is sent</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Do something with request error</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 响应拦截器</span>request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 响应成功进入第1个函数</span>  <span class="token comment" spellcheck="true">// 该函数的参数是响应对象</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Any status code that lie within the range of 2xx cause this function to trigger</span>    <span class="token comment" spellcheck="true">// Do something with response data</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 响应失败进入第2个函数，该函数的参数是错误对象</span>  <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Any status codes that falls outside the range of 2xx cause this function to trigger</span>    <span class="token comment" spellcheck="true">// Do something with response error</span>    <span class="token comment" spellcheck="true">// 如果响应码是 401 ，则请求获取新的 token</span>    <span class="token comment" spellcheck="true">// 响应拦截器中的 error 就是那个响应的错误对象</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 校验是否有 refresh_token</span>      <span class="token keyword">const</span> user <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user <span class="token operator">||</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>refresh_token<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代码不要往后执行了</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果有refresh_token，则请求获取新的 token</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          method<span class="token punctuation">:</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span>          url<span class="token punctuation">:</span> <span class="token string">"http://ttapi.research.itcast.cn/app/v1_0/authorizations"</span><span class="token punctuation">,</span>          headers<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Authorization<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`Bearer $&amp;#123;user.refresh_token&amp;#125;`</span></span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果获取成功，则把新的 token 更新到容器中</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"刷新 token  成功"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"setUser"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          token<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最新获取的可用 token</span>          refresh_token<span class="token punctuation">:</span> user<span class="token punctuation">.</span>refresh_token <span class="token comment" spellcheck="true">// 还是原来的 refresh_token</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把之前失败的用户请求继续发出去</span>        <span class="token comment" spellcheck="true">// config 是一个对象，其中包含本次失败请求相关的那些配置信息，例如 url、method 都有</span>        <span class="token comment" spellcheck="true">// return 把 request 的请求结果继续返回给发请求的具体位置</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果获取失败，直接跳转 登录页</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"请求刷线 token 失败"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> request<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 黑马头条项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
            <tag> vue </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐案例</title>
      <link href="/2022/10/12/10.11-10.12-you-xie-liao-yi-bian-wang-yi-yun-yin-le-an-li/"/>
      <url>/2022/10/12/10.11-10.12-you-xie-liao-yi-bian-wang-yi-yun-yin-le-an-li/</url>
      
        <content type="html"><![CDATA[<h2 id="网易云案例总结-临近考试该复习了停更一段时间-T⌓T"><a href="#网易云案例总结-临近考试该复习了停更一段时间-T⌓T" class="headerlink" title="网易云案例总结(临近考试该复习了停更一段时间(T⌓T))"></a>网易云案例总结(临近考试该复习了停更一段时间(T⌓T))</h2><h3 id="1-又熟悉一遍vant组件库的使用"><a href="#1-又熟悉一遍vant组件库的使用" class="headerlink" title="1.又熟悉一遍vant组件库的使用"></a>1.又熟悉一遍vant组件库的使用</h3><p>1.局部引入配置</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@vue/cli-plugin-babel/preset'</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token string">"libraryName"</span><span class="token punctuation">:</span> <span class="token string">"vant"</span><span class="token punctuation">,</span>      <span class="token string">"libraryDirectory"</span><span class="token punctuation">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>      <span class="token string">"style"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token string">'vant'</span><span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过此配置可以实现vant组件库的局部引入即<code>import &#123;&#125; from &#39;vant&#39;</code></p><h3 id="2-更加熟悉封装axios请求的操作"><a href="#2-更加熟悉封装axios请求的操作" class="headerlink" title="2.更加熟悉封装axios请求的操作"></a>2.更加熟悉封装axios请求的操作</h3><p>1.先在src下新建utils&#x2F;request.js,对网络请求进行二次封装</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 网络请求 - 二次封装</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios</code></pre><p>2.再在src下新建api文件，其中新建index.js作为请求总汇,分别新建Home.js,Play.js,Search.js进行具体请求操作</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Home.js</span><span class="token comment" spellcheck="true">// 文件名-尽量和模块页面文件名统一</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token comment" spellcheck="true">//首页-推荐歌单</span><span class="token keyword">export</span> <span class="token keyword">const</span> recommendMusic <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token string">'/personalized'</span><span class="token punctuation">,</span>    params    <span class="token comment" spellcheck="true">//将来可能传入params的值&amp;#123;limit:20&amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 首页-最新音乐</span><span class="token keyword">export</span> <span class="token keyword">const</span> newMusic <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token string">'/personalized/newsong'</span><span class="token punctuation">,</span>    params<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Search.js</span><span class="token comment" spellcheck="true">// 搜索模块</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">const</span> hotSearch <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token string">'/search/hot'</span><span class="token punctuation">,</span>    params<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> searchResultList <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token string">'/cloudsearch'</span><span class="token punctuation">,</span>    params<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Play.js</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'../utils/request'</span><span class="token comment" spellcheck="true">// 播放页 - 获取歌曲详情</span><span class="token keyword">export</span> <span class="token keyword">const</span> getSongById <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/song/detail?ids=$&amp;#123;id&amp;#125;`</span></span><span class="token punctuation">,</span>  method<span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 播放页 - 获取歌词</span><span class="token keyword">export</span> <span class="token keyword">const</span> getLyricById <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/lyric?id=$&amp;#123;id&amp;#125;`</span></span><span class="token punctuation">,</span>  method<span class="token punctuation">:</span> <span class="token string">"GET"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js作为请求总汇</span><span class="token comment" spellcheck="true">// api文件夹下 各个请求模块js，同一来到index.js再向外导出</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>recommendMusic<span class="token punctuation">,</span>newMusic<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./Home'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> hotSearch<span class="token punctuation">,</span>searchResultList <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./Search'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>getSongById<span class="token punctuation">,</span>getLyricById<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./Play'</span><span class="token keyword">export</span> <span class="token keyword">const</span> recommendMusicAPI <span class="token operator">=</span> recommendMusic <span class="token comment" spellcheck="true">//请求推荐歌单的方法导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> newMusicAPI <span class="token operator">=</span> newMusic <span class="token comment" spellcheck="true">//请求最新音乐的方法导出</span><span class="token keyword">export</span> <span class="token keyword">const</span> hotSearchAPI <span class="token operator">=</span> hotSearch <span class="token comment" spellcheck="true">//搜索-热搜关键词</span><span class="token keyword">export</span> <span class="token keyword">const</span> searchResultListAPI <span class="token operator">=</span> searchResultList <span class="token comment" spellcheck="true">//搜索-搜索结果</span><span class="token keyword">export</span> <span class="token keyword">const</span> getSongByIdAPI <span class="token operator">=</span> getSongById <span class="token comment" spellcheck="true">//搜索-搜索结果</span><span class="token keyword">export</span> <span class="token keyword">const</span> getLyricByIdAPI <span class="token operator">=</span> getLyricById <span class="token comment" spellcheck="true">//搜索-搜索结果</span></code></pre><p>作用：这样做更利于不同请求的调用和更改，更便于维护</p><h3 id="3-更加熟悉vue中路由的操作"><a href="#3-更加熟悉vue中路由的操作" class="headerlink" title="3.更加熟悉vue中路由的操作"></a>3.更加熟悉vue中路由的操作</h3><p>src下新建router&#x2F;index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter  <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Layout <span class="token keyword">from</span> <span class="token string">'@/view/Layout'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'@/view/Home'</span><span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">'@/view/Search'</span><span class="token keyword">import</span> Play <span class="token keyword">from</span> <span class="token string">'@/view/Play'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        path<span class="token punctuation">:</span><span class="token string">'/'</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span><span class="token string">'/layout'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        path<span class="token punctuation">:</span><span class="token string">'/layout'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Layout<span class="token punctuation">,</span>        children<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                path<span class="token punctuation">:</span><span class="token string">'home'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span>Home<span class="token punctuation">,</span>                meta<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//meta保存路由对象额外信息</span>                    title<span class="token punctuation">:</span><span class="token string">'首页'</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                path<span class="token punctuation">:</span><span class="token string">'search'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span>Search<span class="token punctuation">,</span>                meta<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    title<span class="token punctuation">:</span><span class="token string">'搜索'</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        path<span class="token punctuation">:</span><span class="token string">'/play'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span>Play    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routes<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>对路由跳转传参，重定向，子路由更加深入的了解</p><p>入口文件导入</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> <span class="token string">'@/mobile/flexible'</span><span class="token keyword">import</span> <span class="token string">'@/styles/reset.css'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'@/router'</span><span class="token comment" spellcheck="true">// 测试封装api的方法</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> recommendMusicAPI <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./api'</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">recommendMusicAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Tabbar<span class="token punctuation">,</span> TabbarItem <span class="token punctuation">,</span>NavBar<span class="token punctuation">,</span>Col<span class="token punctuation">,</span> Row<span class="token punctuation">,</span>Image <span class="token keyword">as</span> VanImage<span class="token punctuation">,</span>Cell<span class="token punctuation">,</span> CellGroup<span class="token punctuation">,</span>Icon<span class="token punctuation">,</span>Search<span class="token punctuation">,</span>List<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vant'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Search<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Cell<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Icon<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>CellGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VanImage<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Col<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Row<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Tabbar<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>TabbarItem<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>NavBar<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux学习笔记</title>
      <link href="/2022/10/10/10.10redux-bi-ji/"/>
      <url>/2022/10/10/10.10redux-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="Redux概述"><a href="#Redux概述" class="headerlink" title="Redux概述"></a><strong>Redux概述</strong></h2><p>Redux为何物</p><ul><li>Redux是用于做状态管理的JS库</li><li>可用于React，Angular，Vue等项目中，常用于React</li><li>集中式管理React应用多个组件共享的状态</li></ul><p>何时用Redux</p><ul><li>某个组件的状态需要让其他组件拿到</li><li>一个组件要改变另一个组件的状态</li><li>使用原则：不到万不得已不要轻易使用</li></ul><p>Redux 工作流程</p><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/redux.4afb4200.png" alt="redux工作流程"></p><ul><li>组件想用Redux中的状态：把动作类型和数据告诉<code>Action Creators</code></li><li><code>Action Creators</code>创建<code>actions</code>:同步<code>action</code>是一个普通对象，异步<code>action</code>是一个函数</li><li><code>Store</code>调用<code>dispatch()</code>分发给<code>Reducers</code>执行</li><li><code>Reducers</code>接收<code>previousState</code>,<code>action</code>两个参数，对状态进行加工后返回新状态</li><li><code>Store</code>调用<code>getState()</code>把状态传给组件</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h2><p><code>action</code>:</p><ul><li>表示动作的对象，包含两个属性</li><li><code>type</code>:表示属性，值为字符串，唯一，必须属性</li><li><code>data</code>:数据属性，类型任意，可选属性</li><li>{type:’string’,data:data}</li></ul><p><code>reducer</code>:</p><ul><li>用于初始化状态、加工状态</li><li>根据旧状态和<code>action</code>产生新状态</li><li>是<strong>纯函数</strong></li></ul><p>纯函数：输入同样的实参，必定得到同样的输出</p><ul><li>不能改写参数数据</li><li>不产生副作用，如网络请求、输入输出设备（网络请求不稳定）</li><li>不能调用 Date.now() 、Math.random() 等不纯方法</li></ul><p><code>store</code>:</p><ul><li>Redux核心对象，内部维护着state和reducer</li><li>核心API<ul><li><code>store.getState()</code>:获取状态</li><li><code>store.dispatch(action)</code>:分发任务，触发reducer调用，产生新状态</li><li><code>store.subscribe(func)</code>:注册监听函数，当状态改变自动调用</li></ul></li></ul><h2 id="一个求和案例"><a href="#一个求和案例" class="headerlink" title="一个求和案例"></a>一个求和案例</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.jsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> Count <span class="token keyword">from</span> <span class="token string">'./components/Count'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Count <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./redux/store'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 状态改变重新渲染 App 组件</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// redux/constant.js</span><span class="token comment" spellcheck="true">// 保存常量值</span><span class="token keyword">export</span> <span class="token keyword">const</span> INCREMENT <span class="token operator">=</span> <span class="token string">'increment'</span><span class="token keyword">export</span> <span class="token keyword">const</span> DECREMENT <span class="token operator">=</span> <span class="token string">'decrement'</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// redux/count_reducer.js</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> INCREMENT<span class="token punctuation">,</span> DECREMENT <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./constant'</span><span class="token comment" spellcheck="true">//初始化状态</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">countReducer</span><span class="token punctuation">(</span>preState <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> action  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> INCREMENT<span class="token punctuation">:</span>      <span class="token keyword">return</span> preState <span class="token operator">+</span> data    <span class="token keyword">case</span> DECREMENT<span class="token punctuation">:</span>      <span class="token keyword">return</span> preState <span class="token operator">-</span> data    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> preState  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// redux/store.js</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createStore <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token comment" spellcheck="true">//引入为 Count 组件服务的 reducer</span><span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">'./count_reducer'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// redux/count_action.js</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> INCREMENT<span class="token punctuation">,</span> DECREMENT <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./constant'</span><span class="token keyword">export</span> <span class="token keyword">const</span> createIncrementAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> INCREMENT<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> createDecrementAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> DECREMENT<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// components/Count/index.jsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../../redux/store'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createIncrementAction<span class="token punctuation">,</span> createDecrementAction <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'../../redux/count_action'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Count</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   可在组件单独监听 Redux 状态变化</span><span class="token comment" spellcheck="true">//   componentDidMount() &amp;#123;</span><span class="token comment" spellcheck="true">//      store.subscribe(() => &amp;#123;</span><span class="token comment" spellcheck="true">//             this.setState(&amp;#123;&amp;#125;)</span><span class="token comment" spellcheck="true">//         &amp;#125;)</span><span class="token comment" spellcheck="true">//   &amp;#125;</span>  increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber    <span class="token comment" spellcheck="true">// 将 value 转为数值</span>    <span class="token comment" spellcheck="true">// 手动写 Action 对象</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> <span class="token string">'increment'</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> value <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 专门创建 Action 对象</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  decrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createDecrementAction</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  incrementAsync <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>当前求和为：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>select ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber <span class="token operator">=</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>          <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>decrement<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>incrementAsync<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>异步加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>Redux只负责管理状态，状态改变后页面的更新需要自己写</li><li>可以在<code>index.js</code>中监听状态变化，不能直接调<code>render()</code>,要用<code>this.setState(&#123;&#125;)</code>间接调用</li><li><code>reducer</code>由<code>store</code>首次调用时传递的<code>previousState</code>是<code>undefined</code>，<code>action</code>为<code>&#123;type:&#39;@@REDUX/INIT_a.5.v.9&#39;&#125;</code>类似的东西，没有传<code>data</code></li></ul><h2 id="Redux异步编程"><a href="#Redux异步编程" class="headerlink" title="Redux异步编程"></a><strong>Redux异步编程</strong></h2><p>安装异步中间件：</p><pre class=" language-sh"><code class="language-sh">npm install redux-thunk -S</code></pre><p>要点：</p><ul><li>延迟的动作不想交给组件，而是 <code>action</code></li><li>当操作状态所需数据要靠异步任务返回时，可用异步 <code>action</code></li><li>创建 <code>action</code> 的函数返回一个函数，该函数中写异步任务</li><li>异步任务完成后，分发一个同步 <code>action</code> 操作状态</li><li>异步 <code>action</code> 不是必要的，完全可以在组件中等待异步任务结果返回在分发同步 <code>action</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// store.js</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> countReducer <span class="token keyword">from</span> <span class="token string">'./count_reducer'</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// count_action.js</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> INCREMENT<span class="token punctuation">,</span> DECREMENT <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'./constant.js'</span><span class="token keyword">export</span> <span class="token keyword">const</span> createIncrementAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> INCREMENT<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> createDecrementAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> type<span class="token punctuation">:</span> DECREMENT<span class="token punctuation">,</span> data <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 异步 action 返回一个函数</span><span class="token keyword">export</span> <span class="token keyword">const</span> createIncrementAsyncAction <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Count.jsx</span>incrementAsync <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectNumber  store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">createIncrementAsyncAction</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>整个过程简单理解：<code>store</code> 在分发 <code>action</code> 时，发现返回一个函数，那它知道这是个异步 <code>action</code> 。因此 <code>store</code> 勉为其难地帮忙执行这个函数，同时给这个函数传递 <code>dispatch</code> 方法，等待异步任务完成取到数据后，直接调用 <code>dispatch</code> 方法分发同步 <code>action</code> 。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客主题与修改</title>
      <link href="/2022/10/09/hexo-bo-ke-zhu-ti-an-zhuang-yu-xiu-gai/"/>
      <url>/2022/10/09/hexo-bo-ke-zhu-ti-an-zhuang-yu-xiu-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客主题安装与修改"><a href="#hexo博客主题安装与修改" class="headerlink" title="hexo博客主题安装与修改"></a>hexo博客主题安装与修改</h2><h3 id="1-主题下载与安装"><a href="#1-主题下载与安装" class="headerlink" title="1.主题下载与安装"></a><strong>1.主题下载与安装</strong></h3><p>点击<a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">下载地址</a>下载master分支的最新稳定版的代码，解压缩后，将hexo-theme-matery的文件复制到hexo的theme文件夹中即可</p><p>当然你也可以在你的站点目录文件夹下使用 git clone 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本(不定期更新优化)，自主选择版本。</p><pre class=" language-js"><code class="language-js">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinkfox<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>matery themes<span class="token operator">/</span>matery     # 稳定版git clone <span class="token operator">-</span>b develop https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>blinkfox<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>matery themes<span class="token operator">/</span>matery   #<span class="token function">最新版</span><span class="token punctuation">(</span>不定期进行优化更新<span class="token punctuation">)</span></code></pre><h3 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2.主题配置"></a><strong>2.主题配置</strong></h3><p>2.1 <strong>切换主题</strong></p><p>进入根目录下的_config.yml中，往下滑到大概101行有一个theme，将它改为刚才你引入到根目录theme下的文件夹的名字就行，记得theme:后加一个空格<br>即theme: 你引入的文件夹的名字（不用加引号）</p><p>语言选择：如果为中文用户，则在language:后添加值zh-CN，如果不修改，默认为英语；<br>网址修改：url:的值为你的网址名，如<code>http://xxxx.github.io</code>，如果有域名，则修改为你的域名即可<br>点配置文件有个per_page属性，建议修改为6的倍数，这样网站在适应设备时，有较好的显示效果。</p><p>2.2 <strong>新建页面</strong></p><p>本次操作需要新建’tags’,’categories’,’about’,’contact’(留言板（可选）),’friends’(友情链接(可选))<br>基本操作都是一样<br>以’tags’为例</p><p>tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags&#x2F;index.md 文件，那么你就需要新建一个，命令如下</p><pre class=" language-js"><code class="language-js">hexo <span class="token keyword">new</span> <span class="token class-name">page</span> <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 &#x2F;source&#x2F;tags&#x2F;index.md，至少需要以下内容：</p><pre class=" language-js"><code class="language-js"><span class="token operator">--</span><span class="token operator">-</span>title<span class="token punctuation">:</span> tagsdate<span class="token punctuation">:</span> <span class="token number">2018</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">38</span>type<span class="token punctuation">:</span> <span class="token string">"tags"</span>layout<span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token operator">--</span><span class="token operator">-</span></code></pre><p>其他页面的新建也是如此，将tags改为对应的就行，如about，把上面的tags都改为about就行</p><p>tags和category用法<br>你新建玩tags和category页面以后</p><p>在你写post中的md文件时在顶部加入以下代码</p><pre class=" language-js"><code class="language-js">title<span class="token punctuation">:</span> <span class="token number">10.5</span><span class="token punctuation">(</span>React脚手架<span class="token punctuation">)</span>categories<span class="token punctuation">:</span> Reacttags<span class="token punctuation">:</span>  <span class="token operator">-</span> React  <span class="token operator">-</span> 笔记</code></pre><p>就会生成以下效果</p><p><img src="/source%5Cimg%5CSnipaste_2022-10-09_23-16-03.png" alt="图片"></p><p>新建friend页面后同时，在你的博客<code>source</code>目录下新建<code>_data</code>目录，在<code>_data</code>目录中新建<code>friends.json</code>文件，文件内容如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"../avatars/1.jpg"</span><span class="token punctuation">,</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"灰色的小伊"</span><span class="token punctuation">,</span>    <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"来bilibili了解更多追番，冲冲冲"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://space.bilibili.com/244375982?spm_id_from=333.1007.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"../avatars/0.png"</span><span class="token punctuation">,</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"太阳"</span><span class="token punctuation">,</span>    <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"更多知识笔记，来语雀一起学习"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.yuque.com/dashboard/my_books"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"https://avatars.githubusercontent.com/u/100678707?v=4"</span><span class="token punctuation">,</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"engravesunny"</span><span class="token punctuation">,</span>    <span class="token string">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://github.com/Engravesunny"</span><span class="token punctuation">,</span>    <span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><p>2.3<strong>菜单导航配置</strong></p><p>1.菜单导航名称可以是中文也可以是英文(如：Index或主页)<br>2.图标icon 可以在Font Awesome 中查找</p><p>在你引入的主题文件夹中的_config.yml中更改以下代码</p><pre class=" language-js"><code class="language-js">  menu<span class="token punctuation">:</span>  Index<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>home  Tags<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>tags    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>tags  Categories<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>categories    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>bookmark  Archives<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>archives    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>archive  About<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>about    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>user<span class="token operator">-</span>circle  Friends<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>friends    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>address<span class="token operator">-</span>book</code></pre><p>以上是一级菜单<br>二级菜单配置方法：<br>1.在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children)<br>2.在children下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 -.<br>4.注意缩进格式</p><pre class=" language-js"><code class="language-js">  menu<span class="token punctuation">:</span>  Index<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>home  Tags<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>tags    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>tags  Categories<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>categories    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>bookmark  Archives<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>archives    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>archive  About<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>about    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>user<span class="token operator">-</span>circle<span class="token operator">-</span>o  Friends<span class="token punctuation">:</span>    url<span class="token punctuation">:</span> <span class="token operator">/</span>friends    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>address<span class="token operator">-</span>book  Medias<span class="token punctuation">:</span>    icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>list    children<span class="token punctuation">:</span>      <span class="token operator">-</span> name<span class="token punctuation">:</span> Musics        url<span class="token punctuation">:</span> <span class="token operator">/</span>musics        icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>music      <span class="token operator">-</span> name<span class="token punctuation">:</span> Movies        url<span class="token punctuation">:</span> <span class="token operator">/</span>movies        icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>film      <span class="token operator">-</span> name<span class="token punctuation">:</span> Books        url<span class="token punctuation">:</span> <span class="token operator">/</span>books        icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>book      <span class="token operator">-</span> name<span class="token punctuation">:</span> Galleries        url<span class="token punctuation">:</span> <span class="token operator">/</span>galleries        icon<span class="token punctuation">:</span> fas fa<span class="token operator">-</span>image</code></pre><p>2.4<strong>代码高亮</strong><br>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-js"><code class="language-js">npm i <span class="token operator">-</span>S hexo<span class="token operator">-</span>prism<span class="token operator">-</span>plugin</code></pre><pre class=" language-js"><code class="language-js">prism_plugin<span class="token punctuation">:</span>  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    # realtime<span class="token operator">/</span>preprocess  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">false</span>    # <span class="token keyword">default</span> <span class="token boolean">false</span>  custom_css<span class="token punctuation">:</span></code></pre><p>2.5 <strong>搜索</strong></p><p>本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-js"><code class="language-js">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save</code></pre><pre class=" language-js"><code class="language-js">search<span class="token punctuation">:</span>  path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml  field<span class="token punctuation">:</span> post</code></pre><p>2.6<strong>中文链接转拼音（可选的）</strong><br>  如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用   hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><pre class=" language-js"><code class="language-js">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre><pre class=" language-js"><code class="language-js">permalink_pinyin<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span></code></pre><p><strong>注</strong>：除了此插件外，hexo-abbrlink 插件也可以生成非中文的链接。</p><p>2.7 <strong>文章字数统计插件（可选的）</strong><br>  如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。</p><p>  安装命令如下：</p><pre class=" language-js"><code class="language-js">npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>wordcount</code></pre><p>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre class=" language-js"><code class="language-js">wordCount<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">false</span> # 将这个值设置为 <span class="token boolean">true</span> 即可<span class="token punctuation">.</span>  postWordCount<span class="token punctuation">:</span> <span class="token boolean">true</span>  min2read<span class="token punctuation">:</span> <span class="token boolean">true</span>  totalCount<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><p>2.8 <strong>添加 DaoVoice 在线聊天功能（可选的）</strong><br>  前往 <a href="https://www.daocloud.io/">DaoVoice</a>官网注册并且获取app_id，并将app_id填入主题的_config.yml 文件中</p><p>2.9 <strong>添加 Tidio 在线聊天功能（可选的）</strong><br>  前往 <a href="https://www.tidio.com/">Tidio</a>官网注册并且获取Public Key，并将Public Key填入主题的_config.yml 文件中。</p><p>2.10 <strong>修改页脚</strong><br>  页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;footer.ejs 文件中，包括站点、使用的主题、访问量等。</p><p>2.11 <strong>修改社交链接</strong></p><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 &#x2F;layout&#x2F;_partial&#x2F;social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><p>Facebook: fab fa-facebook<br>Twitter: fab fa-twitter<br>Google-plus: fab fa-google-plus<br>Linkedin: fab fa-linkedin<br>Tumblr: fab fa-tumblr<br>Medium: fab fa-medium<br>Slack: fab fa-slack<br>Sina Weibo: fab fa-weibo<br>Wechat: fab fa-weixin<br>QQ: fab fa-qq<br>Zhihu: fab fa-zhihu<br>  <strong>注意</strong>: 本主题中使用的 Font Awesome 版本为 5.11.0</p><p>2.12 <strong>修改打赏的二维码图片</strong><br>  在主题文件的 source&#x2F;medias&#x2F;reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片.<br>2.13 <strong>配置音乐播放器（可选的）</strong><br>  要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>  首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token string">"artist"</span><span class="token punctuation">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token string">"cover"</span><span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token string">"artist"</span><span class="token punctuation">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token string">"cover"</span><span class="token punctuation">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token string">"artist"</span><span class="token punctuation">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token string">"cover"</span><span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><p><strong>注</strong>：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面</p><p>然后，在主题的 _config.yml 配置文件中激活配置即可：</p><pre class=" language-py"><code class="language-py"># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: '#42b983'  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre><p>3.<strong>文章 Front-matter 介绍</strong><br>  Front-matter 选项详解<br>  Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><p>  您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br>  以下为文章的 Front-matter 示例。</p><p>  最简示例</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: typora-vue-theme主题介绍<span class="token title important">date: 2018-09-07 09:25:00<span class="token punctuation">---</span></span></code></pre><p> 最全示例</p><pre class=" language-md"><code class="language-md">---title: typora-vue-theme主题介绍date: 2022-05-02 09:25:00author: CrazyYuimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><p>4.<strong>效果截图</strong></p><p>最新版本进行了优化更新，效果图与最初的效果图有差别，下面的图不是最新版本的。</p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/46.jpg" alt="示例1"></p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/47.jpg" alt="示例2"></p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/48.jpg" alt="示例3"></p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/49.jpg" alt="示例4"></p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/50.jpg" alt="示例5"></p><p>今天先到这，我也要洗澡睡觉了(23:44)</p>]]></content>
      
      
      <categories>
          
          <category> 博客修改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 博客修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客</title>
      <link href="/2022/10/09/10.8-10.9-bi-ji/"/>
      <url>/2022/10/09/10.8-10.9-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="简单博客搭建流程"><a href="#简单博客搭建流程" class="headerlink" title="简单博客搭建流程"></a>简单博客搭建流程</h2><p>这两天主要就是在搭建和配置自己的小博客(以后会发一点博文，不过我大多会是笔记本来用)</p><h3 id="本地安装以及发布"><a href="#本地安装以及发布" class="headerlink" title="本地安装以及发布"></a>本地安装以及发布</h3><ol><li><strong>安装到本地</strong></li></ol><p>首先选择一个磁盘作为你博客文件的存放位置，然后新建一个文件夹，比如名为blogtest的文件夹，创建完后，先不要点进去，在此处点击鼠标右键，选择Git Bash Here，然后依次输入如下命令：</p><pre class=" language-js"><code class="language-js"># hexo框架的安装npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli# 等上一个命令完成后，在输入下面的命令hexo init <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>  #初始化文件夹cd <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>npm install  # 安装博客所需要的依赖文件</code></pre><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/38.jpg" alt="图片1"></p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/39.jpg" alt="图片2"></p><p>等待运行完的时候，此时文件夹里多了很多文件<br>注意：后续的命令都在站点目录下使用Git Bash运行<br>此时Hexo框架的本地搭建已经完成了。命令行依次输入以下命令:</p><pre class=" language-js"><code class="language-js">hexo ghexo s</code></pre><p>浏览器中打开它执行完后给你的地址（默认为<code>http://localhost:4000/</code>），可以看到一个网页，说明Hexo已经成功在本地运行</p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/41.jpg" alt="运行成功图片"></p><p>2.本地博客发布到Github Pages</p><p>首先安装可以用来发布的插件，在站点目录下执行以下命令:</p><pre class=" language-js"><code class="language-js">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre><p>然后把本地目录与GitHub关联起来，输入以下命令行:</p><pre class=" language-js"><code class="language-js">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">'你的邮箱地址'</span></code></pre><p>然后一直回车找到C:&#x2F;Users&#x2F;[username]目录下名为.ssh的文件夹，文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本编辑器打开id_rsa.pub，复制里面的的内容。 然后打开Github，点击右上角的头像 Settings 选择SSH and GPG keys</p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/42.jpg" alt="github指引"></p><p>点击New SSH key 将之前复制的内容粘帖到Key的框中。 上面的Title可以随意，点击Add SSH key 完成添加。</p><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/43.jpg" alt="github指引2"></p><p>然后回到命令行界面，测试一下是否与github连接成功</p><pre class=" language-js"><code class="language-js">ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>com</code></pre><p>点击回车，然后会出现一个询问内容，输入yes，回车，会出现一段内容，Hi ! You’ve successfully authenticated, but GitHub doesnot provide shell access.。 说明连接成功。此处这个应该是你Github的用户名。</p><p>进入博客站点目录，用文本编辑器打开_config.yml，这个_config.yml是博客的配置文件，在以后的博客修改，如个性化修改，博客SEO优化等都会使用到，  修改如下图的几个地方：</p><pre class=" language-js"><code class="language-js">title<span class="token punctuation">:</span> 你的博客名subtitle<span class="token punctuation">:</span> 博客的副标题，有些主题支持description<span class="token punctuation">:</span> 博客描述keywords<span class="token punctuation">:</span> 博客关键词author<span class="token punctuation">:</span> 作者，在文章中显示language<span class="token punctuation">:</span> 博客语言语种   timezone<span class="token punctuation">:</span> 时区</code></pre><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/44.jpg" alt="指引"></p><p>滑到文件最底部，有一个deploy，在deploy下面添加一个repo项 ，一个branch项。填入如下代码，并如下图所示</p><pre class=" language-js"><code class="language-js">type<span class="token punctuation">:</span> gitrepo<span class="token punctuation">:</span> git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>Github用户名<span class="token operator">/</span>github用户名<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git  <span class="token comment" spellcheck="true">//也可使用https地址，如：https://github.com/Github用户名/Github用户名.github.io.git            </span>branch<span class="token punctuation">:</span> master</code></pre><p><img src="https://crazyyuchi.github.io/2022/05/02/bo-ke-da-jian-mei-hua-ju-xi-ban-ben/45.jpg" alt="指引"></p><p>最后就是生成页面，并发布至Github Pages，执行如下命令：</p><pre class=" language-py"><code class="language-py"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g -d</code></pre><p>hexo博客主题的安装于修改会在另一篇里专门讲</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.1-3笔记</title>
      <link href="/2022/10/09/10.1-3-bi-ji/"/>
      <url>/2022/10/09/10.1-3-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="从今天开始学习React了！！（2022-10-01）"><a href="#从今天开始学习React了！！（2022-10-01）" class="headerlink" title="从今天开始学习React了！！（2022.10.01）"></a>从今天开始学习React了！！（2022.10.01）</h2><h2 id="jsx语法规则"><a href="#jsx语法规则" class="headerlink" title="jsx语法规则"></a>jsx语法规则</h2><ul><li><strong>1.定义虚拟DOM时，不要用引号</strong></li><li><strong>2.标签中混用JS表达式时要用<code>&#123;&#125;</code></strong></li><li><strong>3.样式的类名指定不要用<code>class</code>，要用<code>className</code></strong></li><li><strong>4.内联样式，要用<code>style=&#123;&#123;key:value&#125;&#125;</code>的形式去写</strong></li><li><strong>5.只有一个跟标签</strong></li><li><strong>6.标签必须闭合</strong></li><li><strong>7.标签首字母</strong><ul><li><strong>(1).若小写字母开头，则将该标签转为html中同名元素，若html中没有该标签，就报错</strong></li><li><strong>(2).如果是大写字母开头，React就去渲染这个组件，没有定义的话就报错</strong></li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token number">.</span>pink&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"> <span class="token comment" spellcheck="true">/* 此处一定要写babel */</span>    <span class="token comment" spellcheck="true">//1.创建虚拟DOM</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">'外部定义的变量'</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token string">'title'</span>    <span class="token keyword">const</span> VDOM <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>h1 id<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> className<span class="token operator">=</span><span class="token string">"pink"</span> style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token string">'white'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>Hello<span class="token punctuation">,</span>React<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处一定不要写引号，因为不是字符串</span>            <span class="token comment" spellcheck="true">//2.渲染虚拟DOM到页面</span>    <span class="token comment" spellcheck="true">// ReactDOM.render(虚拟DOM,容器)</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>VDOM<span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="2-state属性"><a href="#2-state属性" class="headerlink" title="2.state属性"></a><strong>2.state属性</strong></h2><h2 id="组件内定义state属性"><a href="#组件内定义state属性" class="headerlink" title="组件内定义state属性"></a>组件内定义state属性</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 先准备好一个容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//创建一个组件</span>            <span class="token keyword">class</span> <span class="token class-name">Wether</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        isHot<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                        wind<span class="token punctuation">:</span><span class="token string">'大风'</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>今天天气很<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot<span class="token operator">?</span><span class="token string">'炎热'</span><span class="token punctuation">:</span><span class="token string">'凉爽'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>今天有<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>wind<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Wether<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="state事件绑定"><a href="#state事件绑定" class="headerlink" title="state事件绑定"></a>state事件绑定</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 先准备好一个容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//创建一个组件</span>            <span class="token keyword">class</span> <span class="token class-name">Wether</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 构造器调用1次</span>                <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        isHot<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                        wind<span class="token punctuation">:</span><span class="token string">'大风'</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//解决clickFn中this指向问题</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>clickFn<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickFn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// render调用1+n次 1是初始化那次，n是状态更新的次数</span>                <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickFn<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>今天天气很<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot<span class="token operator">?</span><span class="token string">'炎热'</span><span class="token punctuation">:</span><span class="token string">'凉爽'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>今天有<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>wind<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 类内定义函数</span>                <span class="token function">clickFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// clickFn放在了Weather的原型对象上，供示例使用</span>                    <span class="token comment" spellcheck="true">// 由于clickFn是作为onClick的回调，所以不是通过实例调用的，是直接调用</span>                    <span class="token comment" spellcheck="true">// 类中的方法默认开启严格模式，所以clickFn中的this为undefined</span>                    <span class="token keyword">let</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot                    <span class="token comment" spellcheck="true">// 严重注意：状态(state)不可以直接修改，下面这行就是直接更改！！！</span>                    <span class="token comment" spellcheck="true">// this.state.isHot = !isHot</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token operator">!</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Wether<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 类外定义函数</span>            <span class="token comment" spellcheck="true">// let clickFn = function()&amp;#123;</span>            <span class="token comment" spellcheck="true">//     alert('被点击了')</span>            <span class="token comment" spellcheck="true">// &amp;#125;</span>            <span class="token comment" spellcheck="true">// console.log(clickFn);</span>            <span class="token comment" spellcheck="true">// let clickFn = ()=>&amp;#123;</span>            <span class="token comment" spellcheck="true">//     alert('被点击了')</span>            <span class="token comment" spellcheck="true">// &amp;#125;</span>            <span class="token comment" spellcheck="true">// console.log(clickFn);</span>            <span class="token comment" spellcheck="true">// 测试了一下，上面两种方式没办法执行，不知道是jsx的问题还是我哪里的知识点落下了 —_—</span>            <span class="token comment" spellcheck="true">// function clickFn()&amp;#123;</span>            <span class="token comment" spellcheck="true">//     alert('h1被点击了')</span>            <span class="token comment" spellcheck="true">// &amp;#125;</span>            <span class="token comment" spellcheck="true">// //上面这种是可以的</span>                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="state简写"><a href="#state简写" class="headerlink" title="state简写"></a>state简写</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 先准备好一个容器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token comment" spellcheck="true">//创建一个组件</span>            <span class="token keyword">class</span> <span class="token class-name">Wether</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//直接放到实例自身上</span>                state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        isHot<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>                        wind<span class="token punctuation">:</span><span class="token string">'大风'</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// render调用1+n次 1是初始化那次，n是状态更新的次数</span>                <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>clickFn<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>今天天气很<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot<span class="token operator">?</span><span class="token string">'炎热'</span><span class="token punctuation">:</span><span class="token string">'凉爽'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>今天有<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>wind<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 自定义方法——要用赋值语句的形式+箭头函数</span>                clickFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token operator">!</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Wether<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="state总结"><a href="#state总结" class="headerlink" title="state总结"></a>state总结</h2><p>1.state是组件对象最重要的属性，值是对象<br>2.通过更新组件的state来更新对应的页面显示</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h2><p>1.组件中的render方法中的this为组件实例对象<br>2.组件自定义方法中的this为undefined，如何解决？<br>  1)强制绑定this：通过函数对象的bind()<br>  2)箭头函数<br>3.状态数据，不能直接修改或更新</p><h2 id="props属性"><a href="#props属性" class="headerlink" title="props属性"></a>props属性</h2><h3 id="props基本使用"><a href="#props基本使用" class="headerlink" title="props基本使用"></a>props基本使用</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- prop-types库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/prop-types/15.6.1/prop-types.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props                <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>姓名：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>年龄：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>性别：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对标签属性进行类型，必要性的限制</span>        Person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>            sex<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>            age<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>            speak<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>func        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定默认标签属性值</span>        Person<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sex<span class="token punctuation">:</span><span class="token string">'不男不女'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person name<span class="token operator">=</span><span class="token string">'jerry'</span> age<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">19</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person name<span class="token operator">=</span><span class="token string">'tom'</span> age<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> sex<span class="token operator">=</span><span class="token string">'男'</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//批量传递标签属性</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'jane'</span> <span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span><span class="token string">'女'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>p<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="props的简写方法"><a href="#props的简写方法" class="headerlink" title="props的简写方法"></a>props的简写方法</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react核心库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react/16.4.0/umd/react.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入react-dom，用于支持react操作dom --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 引入babel，用于将jsx转为js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- prop-types库 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/prop-types/15.6.1/prop-types.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对标签属性进行类型，必要性的限制</span>        <span class="token keyword">static</span> propTypes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>            sex<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>            age<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>            speak<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>func        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定默认标签属性值</span>        <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sex<span class="token punctuation">:</span><span class="token string">'不男不女'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props                <span class="token keyword">return</span> <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>姓名：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>年龄：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>性别：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>sex<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person name<span class="token operator">=</span><span class="token string">'jerry'</span> age<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">19</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person name<span class="token operator">=</span><span class="token string">'tom'</span> age<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> sex<span class="token operator">=</span><span class="token string">'男'</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//批量传递标签属性</span>        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'jane'</span> <span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span><span class="token string">'女'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>p<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.4(props)笔记</title>
      <link href="/2022/10/09/10.4-bi-ji/"/>
      <url>/2022/10/09/10.4-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="props-继续学习"><a href="#props-继续学习" class="headerlink" title="props(继续学习)"></a><strong>props(继续学习)</strong></h2><h2 id="类式组件的构造器与props"><a href="#类式组件的构造器与props" class="headerlink" title="类式组件的构造器与props"></a><strong>类式组件的构造器与props</strong></h2><p>构造函数一般用在两种情况:</p><ul><li>1.通过给this.state赋值对象来初始化内部state</li><li>2.为事件处理函数绑定实例</li></ul><pre class=" language-js"><code class="language-js">    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//初始化state</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>wind<span class="token punctuation">:</span><span class="token string">'微风'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决 this 指向问题</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>因此构造器一般不需要写，如果要在构造器内使用this.props才声明构造器,并且需要在最开始调用super(props)</p><pre class=" language-js"><code class="language-js">    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="函数式组件与props"><a href="#函数式组件与props" class="headerlink" title="函数式组件与props"></a><strong>函数式组件与props</strong></h2><p>由于函数可以传递参数，因此函数式组件可以使用 props 。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/prop-types/15.6.1/prop-types.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 因为函数可以传参数，因此函数式组件可以使用props</span>        <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> props            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&lt;</span>li<span class="token operator">></span>姓名：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>年龄：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                        <span class="token operator">&lt;</span>li<span class="token operator">></span>性别：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> sex <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>            age<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>            sex<span class="token punctuation">:</span>PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Person<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sex<span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span><span class="token number">18</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Person name<span class="token operator">=</span><span class="token string">"tom"</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="组件实例核心属性3–ref"><a href="#组件实例核心属性3–ref" class="headerlink" title="组件实例核心属性3–ref"></a><strong>组件实例核心属性3–ref</strong></h2><h2 id="字符串类型的ref"><a href="#字符串类型的ref" class="headerlink" title="字符串类型的ref"></a>字符串类型的ref</h2><p>这种形式已过时，效率不高，官方不建议使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            showLeft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ipt1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs                <span class="token function">alert</span><span class="token punctuation">(</span>ipt1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            showRight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ipt2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>refs                <span class="token function">alert</span><span class="token punctuation">(</span>ipt2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token string">'ipt1'</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"点我提示左侧信息"</span><span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showLeft<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点我提示左侧信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                        <span class="token operator">&lt;</span>input onBlur<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showRight<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ref<span class="token operator">=</span><span class="token string">'ipt2'</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"失去焦点提示右侧信息"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="回调类型的ref"><a href="#回调类型的ref" class="headerlink" title="回调类型的ref"></a>回调类型的ref</h2><p>要点：</p><ul><li><code>c =&gt; this.ipt1 = c</code>就是给组件实例添加<code>ipt1</code>属性，值为节点</li><li>由于是箭头函数，因此<code>this</code>是<code>render</code>函数里的实例，即为组件实例</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            showLeft<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ipt1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>ipt1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            showRight<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ipt2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token function">alert</span><span class="token punctuation">(</span>ipt2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>ipt1<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">'点击获取左侧信息'</span> <span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showLeft<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点我获取左侧信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                        <span class="token operator">&lt;</span>input onBlur<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showRight<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>ipt2<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">'失去焦点提示右侧信息'</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>关于回调 ref 执行次数的问题，官网 (opens new window)描述：</p><p>TIP<br>如果 ref 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 null，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p><p>即内联函数形式，在更新过程中 ref 回调会被执行两次，第一次传入 null ，第二次传入 DOM 元素。若是下述形式，则只执行一次。但是对功能实现没有影响，因此一般也是用内联函数形式。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            state<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                isHot<span class="token punctuation">:</span><span class="token boolean">true</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            changeWeather <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> isHot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHot                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token punctuation">:</span><span class="token operator">!</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            showMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>ipt<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token function">alert</span><span class="token punctuation">(</span>ipt<span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            saveRefs <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isHot<span class="token operator">?</span><span class="token string">'炎热'</span><span class="token punctuation">:</span><span class="token string">'凉爽'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*&lt;input ref=&amp;#123;c=>&amp;#123;this.ipt=c;console.log('@',c)&amp;#125;&amp;#125; type="text"/> &lt;br/>&lt;br/>*/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//上面回调在render更新渲染时会调用两次</span>                        <span class="token comment" spellcheck="true">//解决：外层定义一个save函数，ref回调里调用save，save里提取真实DOM</span>                        <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>saveRefs<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showMsg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>changeWeather<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>切换<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="createRef-API"><a href="#createRef-API" class="headerlink" title="createRef API"></a>createRef API</h2><p>该方式通过调用<code>React.CreateRef</code>返回一个容器用于储存节点，且一个容器只能存储一个节点</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        showMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>showMsg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>点击提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul><li>React 使用自定义事件，而非原生 DOM 事件，即 <code>onClick、onBlur</code> ：为了更好的兼容性</li><li>React 的事件通过事件委托方式进行处理：为了高效</li><li>通过 <code>event.target</code> 可获取触发事件的DOM元素：勿过度使用 <code>ref</code></li></ul><p>当触发事件的元素和需要操作的元素为同一元素时，可以不使用<code>ref</code>:</p><pre class=" language-html"><code class="language-html">class Demo extends React.Component <span class="token entity" title="&#123;">&amp;#123;</span>  showData2 = (event) => <span class="token entity" title="&#123;">&amp;#123;</span>    alert(event.target.value)  <span class="token entity" title="&#125;">&amp;#125;</span>  render() <span class="token entity" title="&#123;">&amp;#123;</span>    return (      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onBlur</span><span class="token attr-value"><span class="token punctuation">=</span>&amp;#123;this.showData2&amp;#125;</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>失去焦点提示数据<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    )  <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.5(React脚手架)</title>
      <link href="/2022/10/08/10.5-2/"/>
      <url>/2022/10/08/10.5-2/</url>
      
        <content type="html"><![CDATA[<h2 id="React脚手架"><a href="#React脚手架" class="headerlink" title="React脚手架"></a>React脚手架</h2><h2 id="React脚手架项目结构"><a href="#React脚手架项目结构" class="headerlink" title="React脚手架项目结构"></a>React脚手架项目结构</h2><p><code>public</code>:静态资源文件</p><ul><li><code>manifest.json</code>:应用加壳(把网页变成安卓&#x2F;ios软件)的配置文件</li><li><code>robots.txt</code>:爬虫协议文件</li></ul><p><code>src</code>:源码文件</p><ul><li><code>App.test.js</code>:用于给<code>App</code>组件做测试</li><li><code>index.js</code>:入口文件</li><li><code>reportWebVitals.js</code>:页面性能分析文件，需要<code>web-vitals</code>支持</li><li><code>setupTests.js</code>:组件单元测试文件，需要<code>jest-dom</code>支持</li></ul><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/React-cli.5baa9e94.png" alt="图像"></p><p><code>index.js</code>代码分析:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- %PUBLIC_URL% 代表 public 文件夹的路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/favicon.ico<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启理想视口，用于做移动端网页的适配 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 网站描述 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Web site created using create-react-app<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用于指定网页添加到手机主屏幕后的图标 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/logo192.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 应用加壳时的配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%PUBLIC_URL%/manifest.json<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>React App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 若浏览器不支持 js 则展示标签中的内容 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>You need to enable JavaScript to run this app.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="样式的模块化"><a href="#样式的模块化" class="headerlink" title="样式的模块化"></a>样式的模块化</h2><p>样式的模块化可用于解决样式冲突的问题。该方法比较麻烦，实际开发用的比较少。用 less 就能解决了。<br><code>component/Hello</code>文件下的<code>index.css</code>改名为<code>index.module.css</code></p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>title&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><p><code>Hello</code>组件导入样式:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">'./index.module.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h2 className<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>hello<span class="token punctuation">.</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>Hello<span class="token punctuation">,</span>React<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="React网络请求"><a href="#React网络请求" class="headerlink" title="React网络请求"></a>React网络请求</h2><h3 id="React脚手架配置代理"><a href="#React脚手架配置代理" class="headerlink" title="React脚手架配置代理"></a>React脚手架配置代理</h3><p>方法一：</p><p>在<code>package.json</code>文件中进行配置:</p><pre class=" language-js"><code class="language-js"><span class="token string">"proxy"</span><span class="token punctuation">:</span><span class="token string">"http://localhost:5000"</span>  <span class="token comment" spellcheck="true">//要访问的url</span></code></pre><ul><li>优点：配置简单，前端请求资源不加前缀</li><li>缺点：不能配置多个代理</li><li>工作方式：当请求了3000端口（本机）不存在的资源时，就会把请求转发给5000端口号服务器</li></ul><p>方法二：</p><p>在src目录下创建代理配置文件setupProxy.js，进行配置：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api1'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//配置转发目标地址(能返回数据的服务器地址)</span>      target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//控制服务器接收到的请求头中host字段的值</span>      <span class="token comment" spellcheck="true">/*      changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000      changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000      changeOrigin默认值为false，但一般将changeOrigin改为true      */</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span>      pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'^/api1'</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token string">'/api2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span>      changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'^/api2'</span><span class="token punctuation">:</span> <span class="token string">''</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.7(React路由)</title>
      <link href="/2022/10/08/10.7/"/>
      <url>/2022/10/08/10.7/</url>
      
        <content type="html"><![CDATA[<h2 id="React路由"><a href="#React路由" class="headerlink" title="React路由"></a><strong>React路由</strong></h2><h2 id="路由的严格匹配与模糊匹配"><a href="#路由的严格匹配与模糊匹配" class="headerlink" title="路由的严格匹配与模糊匹配"></a><strong>路由的严格匹配与模糊匹配</strong></h2><ul><li>默认使用模糊匹配（输入路径必须包含要匹配的路径，且顺序一致</li><li>开启严格模式：<code>&lt;Route exact path=&#39;/about&#39; component=&#123;About&#125;/&gt;</code></li><li>严格匹配开启可能会导致无法继续匹配二级路由</li></ul><h2 id="Redirect的使用"><a href="#Redirect的使用" class="headerlink" title="Redirect的使用"></a>Redirect的使用</h2><ul><li>一般写在所有路由注册的最下方，当所有路由无法匹配时，跳转到Redirect指定的路由</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;About&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;Home&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/about"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a><strong>嵌套路由</strong></h2><ul><li>注册子路由上需要写父路由的path</li><li>路由的匹配是按照注册路由的顺序进行的</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 父组件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span><span class="token operator">&lt;</span>Switch<span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;About&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;Home&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/about"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 子组件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"nav nav-tabs"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/home/news"</span><span class="token operator">></span>News<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/home/message"</span><span class="token operator">></span>Message<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>Switch<span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/news"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;News&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/message"</span> component<span class="token operator">=</span><span class="token string">"&amp;#123;Message&amp;#125;"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/home/news"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a><strong>路由传参</strong></h2><p>三种方式：params,search,state<br>三种方式对比：</p><ul><li>state:在当前页面刷新可以保留参数，但在新页面刷新不能保留。前两种方式因为是在url地址上保存参数，因此地址都能保留</li><li>params和search参数都会变成字符串</li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 路由链接 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/home/message/detail/Bruce/21'</span><span class="token operator">></span>params<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`/home/message/detail/$&amp;#123;item.name&amp;#125;/$&amp;#123;item.age&amp;#125;`</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">'/home/message/detail/?name=Bruce&amp;age=21'</span><span class="token operator">></span>search<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`/home/message/detail/?id=$&amp;#123;item.name&amp;#125;&amp;title=$&amp;#123;item.age&amp;#125;`</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pathname<span class="token punctuation">:</span> <span class="token string">'/home/message/detail'</span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'Bruce'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>state<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 注册路由 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home/message/detail/:name/:age'</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Detail<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> search 和 state 按正常注册即可 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home/message/detail'</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Detail<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//接收参数</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'querystring'</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> search <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> age <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state</code></pre><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>编程式导航是使用路由组件<code>this.props.history</code>提供的API进行路由跳转</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">gopBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>参数为负数时是后退</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//编程式导航传参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/home/message/detail/$&amp;#123;id&amp;#125;/$&amp;#123;title&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//params传参</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/home/message/detail?id=&amp;#123;id&amp;#125;&amp;title=&amp;#123;title&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//search传参</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/home/message/detail`</span></span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>id<span class="token punctuation">,</span>title<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//state传参</span></code></pre><p>withRouter的使用<br><code>withRouter</code>的作用：加工一般组件，使其像路由组件一样有路由组件的API，如<code>this.props.history</code>等。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Component<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>withRouter<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span></code></pre><h2 id="BrowserRouter和HashRouter"><a href="#BrowserRouter和HashRouter" class="headerlink" title="BrowserRouter和HashRouter"></a>BrowserRouter和HashRouter</h2><p>底层原理不一样</p><ul><li>BrowserRouter使用的是H5的history API，不兼容IE9及以下版本</li><li>HashRouter使用的是URL的哈希值</li></ul><p>路径表现不一样</p><ul><li>BrowserRouter的路径中没有#，如：localhost:3000&#x2F;demo&#x2F;test</li><li>HashRouter的路径包含#，如：localhost:3000&#x2F;demo&#x2F;test</li></ul><p>刷新会对路由state参数的影响</p><ul><li>BrowserRouter没有影响，因为state保存在history对象中</li><li>HashRouter刷新后会导致路由state参数的丢失</li></ul><p>备注:HashRouter可以解决一些路径错误相关的问题</p><h2 id="React-UI-组件库"><a href="#React-UI-组件库" class="headerlink" title="React UI 组件库"></a>React UI 组件库</h2><h3 id="Ant-Design-配置按需引入和自定义主题"><a href="#Ant-Design-配置按需引入和自定义主题" class="headerlink" title="Ant Design 配置按需引入和自定义主题"></a>Ant Design 配置按需引入和自定义主题</h3><p>以下配置是 3.x 版本，4.x 版本见<a href="https://3x.ant.design/index-cn">官网</a></p><p>1.安装依赖：</p><pre class=" language-git"><code class="language-git">npm install react-app-rewired customize-cra babel-plugin-import less less-loader</code></pre><p>2.修改 <code>package.json</code></p><pre class=" language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>  <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>  <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired test"</span><span class="token punctuation">,</span>  <span class="token string">"eject"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts eject"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>3.根目录下创建 <code>config-overrides.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置具体的修改规则</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> override<span class="token punctuation">,</span> fixBabelImports<span class="token punctuation">,</span> addLessLoader <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token function">fixBabelImports</span><span class="token punctuation">(</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    libraryName<span class="token punctuation">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>    libraryDirectory<span class="token punctuation">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>    style<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">addLessLoader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lessOptions<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      modifyVars<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">'@primary-color'</span><span class="token punctuation">:</span> <span class="token string">'green'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>备注：不用在组件里引入样式，import ‘antd&#x2F;dist&#x2F;antd.css’ 删掉</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.6(Github案例总结)</title>
      <link href="/2022/10/08/10.6/"/>
      <url>/2022/10/08/10.6/</url>
      
        <content type="html"><![CDATA[<h2 id="Github搜索框案例知识点总结"><a href="#Github搜索框案例知识点总结" class="headerlink" title="Github搜索框案例知识点总结"></a><strong>Github搜索框案例知识点总结</strong></h2><ol><li>设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办</li><li>ES6知识点：解构赋值+重命名</li></ol><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//传统解构赋值</span>   <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> obj   <span class="token comment" spellcheck="true">//连续解构赋值</span>   <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> obj   <span class="token comment" spellcheck="true">//连续解构赋值 + 重命名</span>   <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> b<span class="token punctuation">:</span> value <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> obj</code></pre><h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a><strong>初始代码</strong></h2><h3 id="Search组件"><a href="#Search组件" class="headerlink" title="Search组件"></a><strong>Search组件</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Search</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    search <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取用户的输入</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">.</span>value        <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isFirst<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>isLoading<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//发送网络请求</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/search/users?q=$&amp;#123;keyword&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            res <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">:</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>items<span class="token punctuation">,</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            err <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>err<span class="token punctuation">:</span>err<span class="token punctuation">.</span>message<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'search'</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h1<span class="token operator">></span>Search Github Users<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>搜索<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="List组件"><a href="#List组件" class="headerlink" title="List组件"></a><strong>List组件</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token string">'./Index.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">,</span>isFirst<span class="token punctuation">,</span>isLoading<span class="token punctuation">,</span>err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        isFirst <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎使用，输入关键字开始搜索<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>Loading<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        err <span class="token operator">?</span> <span class="token operator">&lt;</span>h2 style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token punctuation">(</span>                                <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>a rel<span class="token operator">=</span><span class="token string">'noreferrer'</span> href<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>html_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> target<span class="token operator">=</span><span class="token string">'_blank'</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>avatar_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> alt<span class="token operator">=</span><span class="token string">"head_portrait"</span><span class="token operator">/</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>login<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                            <span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a><strong>App.js</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">'./components/Search'</span><span class="token punctuation">;</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'./components/List'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        users<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        isFirst<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        err<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    updateState <span class="token operator">=</span> <span class="token punctuation">(</span>stateObj<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>stateObj<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>Search updateState<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateState<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Search<span class="token operator">></span>                <span class="token operator">&lt;</span>List <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="3-消息订阅与发布"><a href="#3-消息订阅与发布" class="headerlink" title="3. 消息订阅与发布"></a>3. 消息订阅与发布</h2><ul><li>限定月，再发布</li><li>适用于任意组件间通信</li><li>要在<code>componentWillUnmount</code>中取消订阅</li></ul><h2 id="使用PubSub代码"><a href="#使用PubSub代码" class="headerlink" title="使用PubSub代码"></a>使用PubSub代码</h2><h3 id="Search组件-pubsub"><a href="#Search组件-pubsub" class="headerlink" title="Search组件(pubsub)"></a><strong>Search组件(pubsub)</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Search</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    search <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取用户的输入</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> keyword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token punctuation">.</span>value        <span class="token comment" spellcheck="true">// this.props.updateState(&amp;#123;isFirst:false,isLoading:true&amp;#125;)</span>        PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isFirst<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>isLoading<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//发送网络请求</span>        axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/search/users?q=$&amp;#123;keyword&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            res <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// this.props.updateState(&amp;#123;users:res.data.items,isLoading:false&amp;#125;)</span>                PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">:</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>items<span class="token punctuation">,</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            err <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// this.props.updateState(&amp;#123;isLoading:false,err:err.message&amp;#125;)</span>                PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>err<span class="token punctuation">:</span>err<span class="token punctuation">.</span>message<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'search'</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h1<span class="token operator">></span>Search Github Users<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>keyWord<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>search<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>搜索<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="List组件-pubsub"><a href="#List组件-pubsub" class="headerlink" title="List组件(pubsub)"></a><strong>List组件(pubsub)</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">'pubsub-js'</span><span class="token keyword">import</span> <span class="token string">'./Index.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        users<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        isFirst<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        err<span class="token punctuation">:</span><span class="token string">''</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PubSub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>token<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">,</span>isFirst<span class="token punctuation">,</span>isLoading<span class="token punctuation">,</span>err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>ul<span class="token operator">></span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        isFirst <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>欢迎使用，输入关键字开始搜索<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        isLoading <span class="token operator">?</span> <span class="token operator">&lt;</span>h2<span class="token operator">></span>Loading<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        err <span class="token operator">?</span> <span class="token operator">&lt;</span>h2 style<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>color<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>err<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token punctuation">:</span>                        users<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> <span class="token punctuation">(</span>                                <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>id<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>a rel<span class="token operator">=</span><span class="token string">'noreferrer'</span> href<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>html_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> target<span class="token operator">=</span><span class="token string">'_blank'</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>avatar_url<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> alt<span class="token operator">=</span><span class="token string">"head_portrait"</span><span class="token operator">/</span><span class="token operator">></span>                                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span>login<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                                    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                            <span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="App-js-pubsub"><a href="#App-js-pubsub" class="headerlink" title="App.js(pubsub)"></a><strong>App.js(pubsub)</strong></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Search <span class="token keyword">from</span> <span class="token string">'./components/Search'</span><span class="token punctuation">;</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'./components/List'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>Search<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Search<span class="token operator">></span>                <span class="token operator">&lt;</span>List<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>4.<code>fetch</code>发送请求(<strong>关注分离</strong>的设计思想)</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//先看看服务器能不能连上</span>            <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://api.github.com/search/users?q=$&amp;#123;keyword&amp;#125;`</span></span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//在获取数据</span>            <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">:</span>data<span class="token punctuation">.</span>items<span class="token punctuation">,</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请求出错'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'updateState'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>isLoading<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>err<span class="token punctuation">:</span>error<span class="token punctuation">.</span>message<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="React-路由"><a href="#React-路由" class="headerlink" title="React 路由"></a><strong>React</strong> <strong>路由</strong></h2><h3 id="路由的理解"><a href="#路由的理解" class="headerlink" title="路由的理解"></a><strong>路由的理解</strong></h3><p>何为路由</p><ul><li>一个路由是一个映射关系</li><li><code>key</code> 为路径，<code>value</code> 可能是 <code>function</code> 或 组件</li></ul><p>后端路由：</p><ul><li><code>value</code> 是 <code>function</code> ，用于处理客户端的请求</li><li>注册路由：<code>router.get(path, function(req, res))</code></li><li>工作过程：Node 接收到请求，根据路径匹配路由，调用对应函数处理请求，返回响应数据</li></ul><p>前端路由：</p><ul><li>value 是组件</li><li>注册路由：<code>&lt;Route path=&quot;/test&quot; component=&#123;Test&#125;&gt;</code></li><li>工作过程：浏览器路径变为<code>/test</code> ，展示 <code>Test</code> 组件</li></ul><h2 id="路由的基本使用"><a href="#路由的基本使用" class="headerlink" title="路由的基本使用"></a><strong>路由的基本使用</strong></h2><p>导航区用<code>&lt;Link&gt;</code>,展示区用<code>&lt;Route&gt;</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Link <span class="token punctuation">,</span> Route <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'./components/Home'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'./components/About'</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>h1<span class="token operator">></span>React Router Demo<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* &lt;a href="#">About&lt;/a>                    &lt;a href="#">Home&lt;/a> */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"linkArea"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">'link1 active'</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>                            <span class="token operator">&lt;</span>Link className<span class="token operator">=</span><span class="token string">'link2'</span> to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"view"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>&lt;App&gt;</code>最外侧包裹<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> BrowserRouter <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span><span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="路由组件和一般组件"><a href="#路由组件和一般组件" class="headerlink" title="路由组件和一般组件"></a><strong>路由组件和一般组件</strong></h2><p>1.写法不同：</p><ul><li>一般组件：<code>&lt;Demo/&gt;</code></li><li>路由组件：<code>&lt;Route path=&quot;/demo&quot; component=&#123;Demo&#125;/&gt;</code></li></ul><p>2.存放位置不同：</p><ul><li>一般组件：<code>components</code></li><li>路由组件：<code>pages</code></li></ul><p>3.接收到的<code>props</code>不同：</p><ul><li>一般组件：标签属性传递</li><li>路由组件：接收到三个固定的属性</li></ul><pre class=" language-js"><code class="language-js">history<span class="token punctuation">:</span>  go<span class="token punctuation">:</span> ƒ <span class="token function">go</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  goBack<span class="token punctuation">:</span> ƒ <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  goForward<span class="token punctuation">:</span> ƒ <span class="token function">goForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  push<span class="token punctuation">:</span> ƒ <span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  replace<span class="token punctuation">:</span> ƒ <span class="token function">replace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span>location<span class="token punctuation">:</span>  pathname<span class="token punctuation">:</span> <span class="token string">"/home/message/detail/2/hello"</span>  search<span class="token punctuation">:</span> <span class="token string">""</span>  state<span class="token punctuation">:</span> undefinedmatch<span class="token punctuation">:</span>  params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  path<span class="token punctuation">:</span> <span class="token string">"/home/message/detail/:id/:title"</span>  url<span class="token punctuation">:</span> <span class="token string">"/home/message/detail/2/hello"</span></code></pre><h3 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a><strong>NavLink</strong></h3><p><code>NavLink</code>可以实现由链接的高亮，通过<code>activeCassName</code>指定样式名，默认追加类名为<code>active</code></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>NavLink activeClassName<span class="token operator">=</span><span class="token string">"demo"</span> to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span><span class="token operator">&lt;</span>NavLink activeClassName<span class="token operator">=</span><span class="token string">"demo"</span> to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span></code></pre><p>封装<code>NavLink</code>组件:由于<code>NavLink</code>组件中的重复代码太多，因此进行二次封装<br>※ 细节点：组件标签的内容会传递到 <code>this.props.children</code>属性中，反过来通过指定标签的 <code>children</code> 属性可以修改组件标签内容</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// MyNavLink 组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> NavLink <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyNavLink</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// this.props.children 可以取到标签内容，如 About, Home</span>    <span class="token comment" spellcheck="true">// 反过来通过指定标签的 children 属性可以修改标签内容</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>NavLink activeClassName<span class="token operator">=</span><span class="token string">"demo"</span> className<span class="token operator">=</span><span class="token string">"list-group-item"</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span><span class="token operator">&lt;</span>MyNavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>MyNavLink<span class="token operator">></span></code></pre><h3 id="Switch-的使用"><a href="#Switch-的使用" class="headerlink" title="Switch 的使用"></a><strong>Switch</strong> <strong>的使用</strong></h3><p>Switch可以提高路由匹配效率，如果匹配成功，则不再继续匹配后面的路由，即为单一匹配</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/about'</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>About<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Home<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/home'</span> component<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Test<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><h3 id="解决多级路径刷新页面样式丢失的问题"><a href="#解决多级路径刷新页面样式丢失的问题" class="headerlink" title="解决多级路径刷新页面样式丢失的问题"></a><strong>解决多级路径刷新页面样式丢失的问题</strong></h3><ul><li><code>public/index.html</code> 中引入样式时不写<code>./</code>写<code>/</code>（常用）</li><li><code>public/index.html</code>中引入样式时不写<code>./</code>写<code>%PUBLIC_URL%</code>（常用）</li><li>使用<code>HashRouter</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/bootstrap.css"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"%PUBLIC_URL%/css/bootstrap.css"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.5(受控非受控组件)</title>
      <link href="/2022/10/08/10.5/"/>
      <url>/2022/10/08/10.5/</url>
      
        <content type="html"><![CDATA[<h2 id="受控-amp-非受控组件"><a href="#受控-amp-非受控组件" class="headerlink" title="受控 &amp; 非受控组件"></a>受控 &amp; 非受控组件</h2><p>包含表单的组件分类：</p><ul><li>非受控组件：现用现取。即需要时使用，再获取节点得到数据</li><li>受控组件：类似于Vue双向绑定的从视图层绑定到数据</li></ul><p>尽量使用受控组件，因为非受控组件要使用大量的ref</p><pre class=" language-html"><code class="language-html">//非受控组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span>password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span>                <span class="token function">alert</span><span class="token punctuation">(</span>                    <span class="token template-string"><span class="token string">`您的用户名为$&amp;#123;username.value&amp;#125;，密码为$&amp;#123;password.value&amp;#125;`</span></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                            用户名：<span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">'username'</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                                密码 ：<span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span>c<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">'password'</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>button<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Demo<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Demo<span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">//受控组件        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">            <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    username<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                    password<span class="token punctuation">:</span><span class="token string">''</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                saveUserName <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                savePassword <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>password<span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span>password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>                        <span class="token template-string"><span class="token string">`您的用户名为$&amp;#123; username &amp;#125;,密码为$&amp;#123; password &amp;#125;`</span></span>                    <span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>                        <span class="token operator">&lt;</span>div<span class="token operator">></span>                            <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>saveUserName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>savePassword<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>button<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="高阶函数-函数柯里化"><a href="#高阶函数-函数柯里化" class="headerlink" title="高阶函数_函数柯里化"></a>高阶函数_函数柯里化</h2><p>对上述受控组件代码进行优化，希望把<code>saveUserName</code>和<code>savePassword</code>合并为一个函数<br>要点：</p><ul><li>高阶函数：参数为函数或者返回一个函数的函数，如<code>Promise、setTimeout、Array.map()</code></li><li>函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</li></ul><pre class=" language-html"><code class="language-html">//函数柯里化function sum(a)<span class="token entity" title="&#123;">&amp;#123;</span>    return (b)=><span class="token entity" title="&#123;">&amp;#123;</span>        return (c)<span class="token entity" title="&#123;">&amp;#123;</span>            return a + b + c;        <span class="token entity" title="&#125;">&amp;#125;</span>    <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span></code></pre><pre class=" language-html"><code class="language-html">//使用高阶函数和函数柯里化    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                username<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span><span class="token string">''</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            saveFormData <span class="token operator">=</span> <span class="token punctuation">(</span>dataType<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span>password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>                    <span class="token template-string"><span class="token string">`您的用户名为$&amp;#123; username &amp;#125;,密码为$&amp;#123; password &amp;#125;`</span></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>button<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">//不使用柯里化写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            state <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                username<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span><span class="token string">''</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            saveFormData <span class="token operator">=</span> <span class="token punctuation">(</span>dataType<span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">[</span>dataType<span class="token punctuation">]</span><span class="token punctuation">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            handleSubmit <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>username<span class="token punctuation">,</span>password<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>                    <span class="token template-string"><span class="token string">`您的用户名为$&amp;#123; username &amp;#125;,密码为$&amp;#123; password &amp;#125;`</span></span>                <span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>                    <span class="token operator">&lt;</span>div<span class="token operator">></span>                        <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>event<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>event<span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saveFormData</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> type<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">/</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>button<span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Demo<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a><strong>生命周期</strong></h2><h3 id="生命周期旧版"><a href="#生命周期旧版" class="headerlink" title="生命周期旧版"></a><strong>生命周期旧版</strong></h3><p><strong>初始化阶段：</strong><code>ReactDOM.render()</code>触发的初次渲染</p><ul><li><code>constructor</code></li><li><code>componentWillMount</code></li><li><code>render</code></li><li><code>componentDidMount</code> &#x3D;&#x3D;&#x3D;&gt; 常用 一般在这个钩子中做一些初始化的事：如：开启定时器，发送网络请求，订阅消息</li></ul><p><strong>更新阶段：</strong></p><p>1.父组件重新<code>render</code>触发的更新</p><ul><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code> ：控制组件是否更新的阀门，返回值为布尔值，默认为<code>true</code>。若返回 <code>false</code> ，则后续流程不会进行。</li><li><code>componentWillUpdate</code></li><li><code>render</code></li><li><code>componentDidUpdate</code></li></ul><p>2.组件内部调用<code>this.setState()</code>修改状态</p><ul><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li><li><code>render</code></li><li><code>componentDidUpdate</code></li></ul><p>3.组件内部调用<code>this.forceUpdate()</code>强制更新</p><ul><li><code>componentWillUpdate</code></li><li><code>render</code></li><li><code>componentDidUpdate</code>  &#x3D;&#x3D;&#x3D;&gt; 常用  一般在这个钩子里做一些收尾的事，例如：关闭定时器，取消订阅消息</li></ul><p><strong>卸载阶段</strong>:<code>ReactDOM.unmountComponentAtNode()</code>触发</p><ul><li><code>componentWillUnmount</code></li></ul><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/react-lifecyle-old.5c4592bd.png" alt="图像">  </p><h3 id="生命周期新版"><a href="#生命周期新版" class="headerlink" title="生命周期新版"></a><strong>生命周期新版</strong></h3><h3 id="更改内容"><a href="#更改内容" class="headerlink" title="更改内容"></a><strong>更改内容</strong></h3><ul><li>废弃三个钩子：<code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code>。在新版本中这三个钩子需要加<code>UNSAFE_</code>前缀，后续可能会废弃</li><li>新增两个钩子（实际场景用的很少）：<code>getDerivedStateFromProps</code>、<code>getSnapshotBeforeUpdate</code></li></ul><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/react-lifecycle-new.7009279b.png" alt="图像"></p><h4 id="static-getDerivedStateFromProps-props-state-："><a href="#static-getDerivedStateFromProps-props-state-：" class="headerlink" title="static getDerivedStateFromProps(props, state)："></a><strong>static getDerivedStateFromProps(props, state)：</strong></h4><ul><li>需使用 <code>static</code> 修饰</li><li>需返回一个对象更新 <code>state</code>或返回 <code>null</code></li><li>适用于如下情况：<code>state</code> 的值任何时候都取决于<code>prop</code></li></ul><h4 id="getSnapshotBeforeUpdate-prevProps-prevState-："><a href="#getSnapshotBeforeUpdate-prevProps-prevState-：" class="headerlink" title="getSnapshotBeforeUpdate(prevProps, prevState)："></a><strong>getSnapshotBeforeUpdate(prevProps, prevState)：</strong></h4><ul><li>在组件更新之前获取快照</li><li>得组件能在发生更改之前从 <code>DOM</code>中捕获一些信息（如滚动位置）</li><li>返回值将作为参数传递给 <code>componentDidUpdate()</code></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getDerivedStateFromProps'</span><span class="token punctuation">,</span>props<span class="token punctuation">,</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'getSnapshotBeforeUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'atguigu'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>preProps<span class="token punctuation">,</span>preState<span class="token punctuation">,</span>snapshotValue<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'componentDidUpdate'</span><span class="token punctuation">,</span>preProps<span class="token punctuation">,</span>preState<span class="token punctuation">,</span>snapshotValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="最重要的三个钩子"><a href="#最重要的三个钩子" class="headerlink" title="最重要的三个钩子"></a><strong>最重要的三个钩子</strong></h4><ul><li>render ：初始化渲染和更新渲染</li><li>componentDidMount ：进行初始化，如开启定时器、发送网络请求、订阅消息</li><li>componentWillUnmount ：进行收尾，如关闭定时器、取消订阅消息</li></ul><h2 id="虚拟-DOM-与-Diff-算法"><a href="#虚拟-DOM-与-Diff-算法" class="headerlink" title="虚拟 DOM 与 Diff 算法"></a>虚拟 DOM 与 Diff 算法</h2><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/Diff.ae9f4adc.png" alt="图像"></p><h2 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a><code>key</code><strong>的作用</strong></h2><p><code>key</code> 是虚拟 DOM 对象的标识，可提高页面更新渲染的效率。</p><p>当状态中的数据发生变化时，React 会根据新数据生成新的虚拟 DOM ，接着对新旧虚拟 DOM 进行 Diff 比较，规则如下：</p><ul><li>旧虚拟 DOM 找到和新虚拟 DOM 相同的 key：<ul><li>若内容没变，直接复用真实 DOM</li><li>若内容改变，则生成新的真实 DOM ，替换页面中之前的真实 DOM</li></ul></li><li>旧虚拟 DOM 未找到和新虚拟 DOM 相同的 key：根据数据创建新的真实 DOM ，渲染到页面</li></ul><h2 id="使用-index-作为-key-可能引发的问题："><a href="#使用-index-作为-key-可能引发的问题：" class="headerlink" title="使用 index 作为 key 可能引发的问题："></a><strong>使用 <code>index</code> 作为 <code>key</code> 可能引发的问题：</strong></h2><ul><li>若对数据进行逆序添加、逆序删除等破坏顺序的操作，会进行没有必要的真实 DOM 更新。界面效果没问题，但效率低下。</li><li>如果结构中包含输入类的 DOM（如 input 输入框） ，则会产生错误的 DOM 更新。</li><li>若不存在对数据逆序添加、逆序删除等破坏顺序的操作，则没有问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
